
Elekid_MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ea0  08003ea0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ea0  08003ea0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ea0  08003ea0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea0  08003ea0  00013ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ea4  08003ea4  00013ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000010  08003eb4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  08003eb4  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e77  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6a  00000000  00000000  00029eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002ba20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a589  00000000  00000000  0002c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a300  00000000  00000000  00046f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c632  00000000  00000000  00051241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed873  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002190  00000000  00000000  000ed8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e58 	.word	0x08003e58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003e58 	.word	0x08003e58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fb85 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f817 	bl	80009a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f949 	bl	8000c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 f929 	bl	8000bcc <MX_DMA_Init>
  MX_ADC2_Init();
 800097a:	f000 f86f 	bl	8000a5c <MX_ADC2_Init>
  MX_CAN_Init();
 800097e:	f000 f8ef 	bl	8000b60 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2ConvertedValues, 64);
 8000982:	2240      	movs	r2, #64	; 0x40
 8000984:	4904      	ldr	r1, [pc, #16]	; (8000998 <main+0x34>)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <main+0x38>)
 8000988:	f000 fe38 	bl	80015fc <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 800098c:	4803      	ldr	r0, [pc, #12]	; (800099c <main+0x38>)
 800098e:	f000 fd7f 	bl	8001490 <HAL_ADC_Start>
  uint8_t flag = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x32>
 8000998:	200000fc 	.word	0x200000fc
 800099c:	20000030 	.word	0x20000030

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b096      	sub	sp, #88	; 0x58
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009aa:	2228      	movs	r2, #40	; 0x28
 80009ac:	2100      	movs	r1, #0
 80009ae:	4618      	mov	r0, r3
 80009b0:	f003 fa4a 	bl	8003e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
 80009ce:	60da      	str	r2, [r3, #12]
 80009d0:	611a      	str	r2, [r3, #16]
 80009d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80009de:	2301      	movs	r3, #1
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e2:	2301      	movs	r3, #1
 80009e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009f0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 ffea 	bl	80029d4 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a06:	f000 f9ef 	bl	8000de8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	f107 031c 	add.w	r3, r7, #28
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fedc 	bl	80037e4 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a32:	f000 f9d9 	bl	8000de8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a3e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 f8b6 	bl	8003bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a4e:	f000 f9cb 	bl	8000de8 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3758      	adds	r7, #88	; 0x58
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a62:	463b      	mov	r3, r7
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a74:	4a39      	ldr	r2, [pc, #228]	; (8000b5c <MX_ADC2_Init+0x100>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a78:	4b37      	ldr	r3, [pc, #220]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a84:	4b34      	ldr	r3, [pc, #208]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b31      	ldr	r3, [pc, #196]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a98:	4b2f      	ldr	r3, [pc, #188]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa4:	4b2c      	ldr	r3, [pc, #176]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000aac:	2204      	movs	r2, #4
 8000aae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ab0:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000aba:	2204      	movs	r2, #4
 8000abc:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aca:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000acc:	f000 fb4e 	bl	800116c <HAL_ADC_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000ad6:	f000 f987 	bl	8000de8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ada:	2301      	movs	r3, #1
 8000adc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000af8:	f000 fe5a 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b02:	f000 f971 	bl	8000de8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4812      	ldr	r0, [pc, #72]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000b10:	f000 fe4e 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC2_Init+0xc2>
  {
    Error_Handler();
 8000b1a:	f000 f965 	bl	8000de8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	480c      	ldr	r0, [pc, #48]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000b28:	f000 fe42 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC2_Init+0xda>
  {
    Error_Handler();
 8000b32:	f000 f959 	bl	8000de8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b36:	2304      	movs	r3, #4
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_ADC2_Init+0xfc>)
 8000b40:	f000 fe36 	bl	80017b0 <HAL_ADC_ConfigChannel>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_ADC2_Init+0xf2>
  {
    Error_Handler();
 8000b4a:	f000 f94d 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000030 	.word	0x20000030
 8000b5c:	50000100 	.word	0x50000100

08000b60 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b66:	4a18      	ldr	r2, [pc, #96]	; (8000bc8 <MX_CAN_Init+0x68>)
 8000b68:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b82:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b86:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b8a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_CAN_Init+0x64>)
 8000bb2:	f001 f9e2 	bl	8001f7a <HAL_CAN_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000bbc:	f000 f914 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000080 	.word	0x20000080
 8000bc8:	40006400 	.word	0x40006400

08000bcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_DMA_Init+0x38>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <MX_DMA_Init+0x38>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_DMA_Init+0x38>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	200c      	movs	r0, #12
 8000bf0:	f001 fb99 	bl	8002326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000bf4:	200c      	movs	r0, #12
 8000bf6:	f001 fbb2 	bl	800235e <HAL_NVIC_EnableIRQ>

}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40021000 	.word	0x40021000

08000c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1e:	4b29      	ldr	r3, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c20:	695b      	ldr	r3, [r3, #20]
 8000c22:	4a28      	ldr	r2, [pc, #160]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c28:	6153      	str	r3, [r2, #20]
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c38:	695b      	ldr	r3, [r3, #20]
 8000c3a:	4a22      	ldr	r2, [pc, #136]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	6153      	str	r3, [r2, #20]
 8000c42:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c58:	6153      	str	r3, [r2, #20]
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_GPIO_Init+0xbc>)
 8000c5c:	695b      	ldr	r3, [r3, #20]
 8000c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f001 fe98 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_2_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2138      	movs	r1, #56	; 0x38
 8000c78:	4813      	ldr	r0, [pc, #76]	; (8000cc8 <MX_GPIO_Init+0xc0>)
 8000c7a:	f001 fe93 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_1_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f001 fd11 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_2_Pin LED_3_Pin LED_4_Pin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_3_Pin|LED_4_Pin;
 8000c9e:	2338      	movs	r3, #56	; 0x38
 8000ca0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 030c 	add.w	r3, r7, #12
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_GPIO_Init+0xc0>)
 8000cb6:	f001 fd03 	bl	80026c0 <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3720      	adds	r7, #32
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	00000000 	.word	0x00000000

08000cd0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000cd0:	b590      	push	{r4, r7, lr}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i <= 3; i++) {
 8000cd8:	2300      	movs	r3, #0
 8000cda:	77fb      	strb	r3, [r7, #31]
 8000cdc:	e068      	b.n	8000db0 <HAL_ADC_ConvCpltCallback+0xe0>
		uint32_t sum = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
		double mean = 0;
 8000ce2:	f04f 0200 	mov.w	r2, #0
 8000ce6:	f04f 0300 	mov.w	r3, #0
 8000cea:	e9c7 2302 	strd	r2, r3, [r7, #8]

		for(uint8_t j=0; j < 16; j++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	75fb      	strb	r3, [r7, #23]
 8000cf2:	e00d      	b.n	8000d10 <HAL_ADC_ConvCpltCallback+0x40>
			sum += ADC2ConvertedValues[i + 4*j];
 8000cf4:	7ffa      	ldrb	r2, [r7, #31]
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	4413      	add	r3, r2
 8000cfc:	4a34      	ldr	r2, [pc, #208]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x100>)
 8000cfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d02:	461a      	mov	r2, r3
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	4413      	add	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
		for(uint8_t j=0; j < 16; j++) {
 8000d0a:	7dfb      	ldrb	r3, [r7, #23]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	75fb      	strb	r3, [r7, #23]
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	2b0f      	cmp	r3, #15
 8000d14:	d9ee      	bls.n	8000cf4 <HAL_ADC_ConvCpltCallback+0x24>
		}

		mean = sum*3.3/65520; //Converting from ADC value to voltage
 8000d16:	69b8      	ldr	r0, [r7, #24]
 8000d18:	f7ff fb98 	bl	800044c <__aeabi_ui2d>
 8000d1c:	a328      	add	r3, pc, #160	; (adr r3, 8000dc0 <HAL_ADC_ConvCpltCallback+0xf0>)
 8000d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d22:	f7ff fc0d 	bl	8000540 <__aeabi_dmul>
 8000d26:	4602      	mov	r2, r0
 8000d28:	460b      	mov	r3, r1
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	a326      	add	r3, pc, #152	; (adr r3, 8000dc8 <HAL_ADC_ConvCpltCallback+0xf8>)
 8000d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d34:	f7ff fd2e 	bl	8000794 <__aeabi_ddiv>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		if (i==1)
 8000d40:	7ffb      	ldrb	r3, [r7, #31]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d118      	bne.n	8000d78 <HAL_ADC_ConvCpltCallback+0xa8>
		{
			VSense[i] = (mean*25) + 25;
 8000d46:	f04f 0200 	mov.w	r2, #0
 8000d4a:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000d4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d50:	f7ff fbf6 	bl	8000540 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	7ffc      	ldrb	r4, [r7, #31]
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x104>)
 8000d64:	f7ff fa36 	bl	80001d4 <__adddf3>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	481a      	ldr	r0, [pc, #104]	; (8000dd8 <HAL_ADC_ConvCpltCallback+0x108>)
 8000d6e:	00e1      	lsls	r1, r4, #3
 8000d70:	4401      	add	r1, r0
 8000d72:	e9c1 2300 	strd	r2, r3, [r1]
 8000d76:	e018      	b.n	8000daa <HAL_ADC_ConvCpltCallback+0xda>
		}
		else
		{
			ISense[i-2] = (mean/50) / R_SHUNT;
 8000d78:	f04f 0200 	mov.w	r2, #0
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_ADC_ConvCpltCallback+0x10c>)
 8000d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d82:	f7ff fd07 	bl	8000794 <__aeabi_ddiv>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	7ffb      	ldrb	r3, [r7, #31]
 8000d90:	1e9c      	subs	r4, r3, #2
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_ADC_ConvCpltCallback+0x110>)
 8000d98:	f7ff fcfc 	bl	8000794 <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4810      	ldr	r0, [pc, #64]	; (8000de4 <HAL_ADC_ConvCpltCallback+0x114>)
 8000da2:	00e1      	lsls	r1, r4, #3
 8000da4:	4401      	add	r1, r0
 8000da6:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t i=0; i <= 3; i++) {
 8000daa:	7ffb      	ldrb	r3, [r7, #31]
 8000dac:	3301      	adds	r3, #1
 8000dae:	77fb      	strb	r3, [r7, #31]
 8000db0:	7ffb      	ldrb	r3, [r7, #31]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d993      	bls.n	8000cde <HAL_ADC_ConvCpltCallback+0xe>
		}
	}
}
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	3724      	adds	r7, #36	; 0x24
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	66666666 	.word	0x66666666
 8000dc4:	400a6666 	.word	0x400a6666
 8000dc8:	00000000 	.word	0x00000000
 8000dcc:	40effe00 	.word	0x40effe00
 8000dd0:	200000fc 	.word	0x200000fc
 8000dd4:	40390000 	.word	0x40390000
 8000dd8:	200000a8 	.word	0x200000a8
 8000ddc:	40490000 	.word	0x40490000
 8000de0:	402e0000 	.word	0x402e0000
 8000de4:	20000180 	.word	0x20000180

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <Error_Handler+0x8>
	...

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <HAL_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <HAL_MspInit+0x44>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <HAL_MspInit+0x44>)
 8000e14:	69db      	ldr	r3, [r3, #28]
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <HAL_MspInit+0x44>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	61d3      	str	r3, [r2, #28]
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_MspInit+0x44>)
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	; 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <HAL_ADC_MspInit+0xc4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d14c      	bne.n	8000ef8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <HAL_ADC_MspInit+0xc8>)
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <HAL_ADC_MspInit+0xc8>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6153      	str	r3, [r2, #20]
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <HAL_ADC_MspInit+0xc8>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <HAL_ADC_MspInit+0xc8>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_ADC_MspInit+0xc8>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e8e:	23f0      	movs	r3, #240	; 0xf0
 8000e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e92:	2303      	movs	r3, #3
 8000e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea4:	f001 fc0c 	bl	80026c0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <HAL_ADC_MspInit+0xd0>)
 8000eac:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ebc:	2280      	movs	r2, #128	; 0x80
 8000ebe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ece:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ede:	f001 fa58 	bl	8002392 <HAL_DMA_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000ee8:	f7ff ff7e 	bl	8000de8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	50000100 	.word	0x50000100
 8000f04:	40021000 	.word	0x40021000
 8000f08:	200000b8 	.word	0x200000b8
 8000f0c:	4002001c 	.word	0x4002001c

08000f10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_CAN_MspInit+0x80>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d129      	bne.n	8000f86 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_CAN_MspInit+0x84>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a17      	ldr	r2, [pc, #92]	; (8000f94 <HAL_CAN_MspInit+0x84>)
 8000f38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <HAL_CAN_MspInit+0x84>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_CAN_MspInit+0x84>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a11      	ldr	r2, [pc, #68]	; (8000f94 <HAL_CAN_MspInit+0x84>)
 8000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_CAN_MspInit+0x84>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f74:	2309      	movs	r3, #9
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f001 fb9d 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40006400 	.word	0x40006400
 8000f94:	40021000 	.word	0x40021000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f88e 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <DMA1_Channel2_IRQHandler+0x10>)
 8000ff2:	f001 fa74 	bl	80024de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000b8 	.word	0x200000b8

08001000 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopForever+0x6>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopForever+0xa>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopForever+0xe>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopForever+0x16>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f002 fed5 	bl	8003e00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fc85 	bl	8000964 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800105c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001068:	08003ea8 	.word	0x08003ea8
  ldr r2, =_sbss
 800106c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001070:	20000194 	.word	0x20000194

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x28>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x28>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f001 f941 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff feae 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000

080010a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f001 f959 	bl	800237a <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f001 f921 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000004 	.word	0x20000004

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000008 	.word	0x20000008
 8001128:	20000190 	.word	0x20000190

0800112c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000190 	.word	0x20000190

08001144 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09a      	sub	sp, #104	; 0x68
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2300      	movs	r3, #0
 8001176:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800117a:	2300      	movs	r3, #0
 800117c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800117e:	2300      	movs	r3, #0
 8001180:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e172      	b.n	8001472 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	2b00      	cmp	r3, #0
 800119c:	d176      	bne.n	800128c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d152      	bne.n	800124c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2200      	movs	r2, #0
 80011b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff fe3b 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d13b      	bne.n	800124c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f000 fe71 	bl	8001ebc <ADC_Disable>
 80011da:	4603      	mov	r3, r0
 80011dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12f      	bne.n	800124c <HAL_ADC_Init+0xe0>
 80011ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d12b      	bne.n	800124c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011fc:	f023 0302 	bic.w	r3, r3, #2
 8001200:	f043 0202 	orr.w	r2, r3, #2
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001216:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001226:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001228:	4b94      	ldr	r3, [pc, #592]	; (800147c <HAL_ADC_Init+0x310>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a94      	ldr	r2, [pc, #592]	; (8001480 <HAL_ADC_Init+0x314>)
 800122e:	fba2 2303 	umull	r2, r3, r2, r3
 8001232:	0c9a      	lsrs	r2, r3, #18
 8001234:	4613      	mov	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	4413      	add	r3, r2
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800123e:	e002      	b.n	8001246 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	3b01      	subs	r3, #1
 8001244:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001264:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001268:	d110      	bne.n	800128c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f023 0312 	bic.w	r3, r3, #18
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f043 0201 	orr.w	r2, r3, #1
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	f003 0310 	and.w	r3, r3, #16
 8001294:	2b00      	cmp	r3, #0
 8001296:	f040 80df 	bne.w	8001458 <HAL_ADC_Init+0x2ec>
 800129a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 80da 	bne.w	8001458 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f040 80d2 	bne.w	8001458 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012bc:	f043 0202 	orr.w	r2, r3, #2
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c4:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <HAL_ADC_Init+0x318>)
 80012c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d0:	d102      	bne.n	80012d8 <HAL_ADC_Init+0x16c>
 80012d2:	4b6d      	ldr	r3, [pc, #436]	; (8001488 <HAL_ADC_Init+0x31c>)
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	e002      	b.n	80012de <HAL_ADC_Init+0x172>
 80012d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012dc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d108      	bne.n	80012fe <HAL_ADC_Init+0x192>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d101      	bne.n	80012fe <HAL_ADC_Init+0x192>
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_ADC_Init+0x194>
 80012fe:	2300      	movs	r3, #0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11c      	bne.n	800133e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001304:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d107      	bne.n	8001326 <HAL_ADC_Init+0x1ba>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b01      	cmp	r3, #1
 8001320:	d101      	bne.n	8001326 <HAL_ADC_Init+0x1ba>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_ADC_Init+0x1bc>
 8001326:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001328:	2b00      	cmp	r3, #0
 800132a:	d108      	bne.n	800133e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800132c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	431a      	orrs	r2, r3
 800133a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7e5b      	ldrb	r3, [r3, #25]
 8001342:	035b      	lsls	r3, r3, #13
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001348:	2a01      	cmp	r2, #1
 800134a:	d002      	beq.n	8001352 <HAL_ADC_Init+0x1e6>
 800134c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001350:	e000      	b.n	8001354 <HAL_ADC_Init+0x1e8>
 8001352:	2200      	movs	r2, #0
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	68db      	ldr	r3, [r3, #12]
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4313      	orrs	r3, r2
 8001362:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001364:	4313      	orrs	r3, r2
 8001366:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d11b      	bne.n	80013aa <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	7e5b      	ldrb	r3, [r3, #25]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	3b01      	subs	r3, #1
 8001380:	045a      	lsls	r2, r3, #17
 8001382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001384:	4313      	orrs	r3, r2
 8001386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138a:	663b      	str	r3, [r7, #96]	; 0x60
 800138c:	e00d      	b.n	80013aa <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001396:	f043 0220 	orr.w	r2, r3, #32
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d007      	beq.n	80013c2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ba:	4313      	orrs	r3, r2
 80013bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013be:	4313      	orrs	r3, r2
 80013c0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 030c 	and.w	r3, r3, #12
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d114      	bne.n	80013fa <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6812      	ldr	r2, [r2, #0]
 80013da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013de:	f023 0302 	bic.w	r3, r3, #2
 80013e2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	7e1b      	ldrb	r3, [r3, #24]
 80013e8:	039a      	lsls	r2, r3, #14
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	4313      	orrs	r3, r2
 80013f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013f6:	4313      	orrs	r3, r2
 80013f8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <HAL_ADC_Init+0x320>)
 8001402:	4013      	ands	r3, r2
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800140a:	430b      	orrs	r3, r1
 800140c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10c      	bne.n	8001430 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	f023 010f 	bic.w	r1, r3, #15
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
 8001424:	1e5a      	subs	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	631a      	str	r2, [r3, #48]	; 0x30
 800142e:	e007      	b.n	8001440 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 020f 	bic.w	r2, r2, #15
 800143e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	f043 0201 	orr.w	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	641a      	str	r2, [r3, #64]	; 0x40
 8001456:	e00a      	b.n	800146e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145c:	f023 0312 	bic.w	r3, r3, #18
 8001460:	f043 0210 	orr.w	r2, r3, #16
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001468:	2301      	movs	r3, #1
 800146a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800146e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001472:	4618      	mov	r0, r3
 8001474:	3768      	adds	r7, #104	; 0x68
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000000 	.word	0x20000000
 8001480:	431bde83 	.word	0x431bde83
 8001484:	50000300 	.word	0x50000300
 8001488:	50000100 	.word	0x50000100
 800148c:	fff0c007 	.word	0xfff0c007

08001490 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 0304 	and.w	r3, r3, #4
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 809c 	bne.w	80015e4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_ADC_Start+0x2a>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e097      	b.n	80015ea <HAL_ADC_Start+0x15a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 fc9c 	bl	8001e00 <ADC_Enable>
 80014c8:	4603      	mov	r3, r0
 80014ca:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f040 8083 	bne.w	80015da <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014dc:	f023 0301 	bic.w	r3, r3, #1
 80014e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014e8:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <HAL_ADC_Start+0x164>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 031f 	and.w	r3, r3, #31
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_ADC_Start+0x6e>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014fc:	d115      	bne.n	800152a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d027      	beq.n	8001568 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001520:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001528:	e01e      	b.n	8001568 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800153e:	d004      	beq.n	800154a <HAL_ADC_Start+0xba>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <HAL_ADC_Start+0x168>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d10e      	bne.n	8001568 <HAL_ADC_Start+0xd8>
 800154a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001560:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001574:	d106      	bne.n	8001584 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f023 0206 	bic.w	r2, r3, #6
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	645a      	str	r2, [r3, #68]	; 0x44
 8001582:	e002      	b.n	800158a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	221c      	movs	r2, #28
 8001598:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_ADC_Start+0x164>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 031f 	and.w	r3, r3, #31
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d010      	beq.n	80015c8 <HAL_ADC_Start+0x138>
 80015a6:	4b13      	ldr	r3, [pc, #76]	; (80015f4 <HAL_ADC_Start+0x164>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2b05      	cmp	r3, #5
 80015b0:	d00a      	beq.n	80015c8 <HAL_ADC_Start+0x138>
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_ADC_Start+0x164>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	d004      	beq.n	80015c8 <HAL_ADC_Start+0x138>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015c6:	d10f      	bne.n	80015e8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0204 	orr.w	r2, r2, #4
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015e2:	e001      	b.n	80015e8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015e4:	2302      	movs	r3, #2
 80015e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	50000300 	.word	0x50000300
 80015f8:	50000100 	.word	0x50000100

080015fc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 80b9 	bne.w	800178e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_ADC_Start_DMA+0x2e>
 8001626:	2302      	movs	r3, #2
 8001628:	e0b4      	b.n	8001794 <HAL_ADC_Start_DMA+0x198>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001632:	4b5a      	ldr	r3, [pc, #360]	; (800179c <HAL_ADC_Start_DMA+0x1a0>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 031f 	and.w	r3, r3, #31
 800163a:	2b00      	cmp	r3, #0
 800163c:	f040 80a0 	bne.w	8001780 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 fbdd 	bl	8001e00 <ADC_Enable>
 8001646:	4603      	mov	r3, r0
 8001648:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800164a:	7dfb      	ldrb	r3, [r7, #23]
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 8092 	bne.w	8001776 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800165a:	f023 0301 	bic.w	r3, r3, #1
 800165e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_ADC_Start_DMA+0x1a0>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2b00      	cmp	r3, #0
 8001670:	d004      	beq.n	800167c <HAL_ADC_Start_DMA+0x80>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800167a:	d115      	bne.n	80016a8 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001680:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d027      	beq.n	80016e6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800169e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80016a6:	e01e      	b.n	80016e6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016bc:	d004      	beq.n	80016c8 <HAL_ADC_Start_DMA+0xcc>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a37      	ldr	r2, [pc, #220]	; (80017a0 <HAL_ADC_Start_DMA+0x1a4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d10e      	bne.n	80016e6 <HAL_ADC_Start_DMA+0xea>
 80016c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f023 0206 	bic.w	r2, r3, #6
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2200      	movs	r2, #0
 8001706:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	4a23      	ldr	r2, [pc, #140]	; (80017a4 <HAL_ADC_Start_DMA+0x1a8>)
 8001716:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171c:	4a22      	ldr	r2, [pc, #136]	; (80017a8 <HAL_ADC_Start_DMA+0x1ac>)
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001724:	4a21      	ldr	r2, [pc, #132]	; (80017ac <HAL_ADC_Start_DMA+0x1b0>)
 8001726:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	221c      	movs	r2, #28
 800172e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0210 	orr.w	r2, r2, #16
 800173e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0201 	orr.w	r2, r2, #1
 800174e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3340      	adds	r3, #64	; 0x40
 800175a:	4619      	mov	r1, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f000 fe5e 	bl	8002420 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	689a      	ldr	r2, [r3, #8]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0204 	orr.w	r2, r2, #4
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	e00d      	b.n	8001792 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800177e:	e008      	b.n	8001792 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800178c:	e001      	b.n	8001792 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800178e:	2302      	movs	r3, #2
 8001790:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001792:	7dfb      	ldrb	r3, [r7, #23]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	50000300 	.word	0x50000300
 80017a0:	50000100 	.word	0x50000100
 80017a4:	08001d35 	.word	0x08001d35
 80017a8:	08001daf 	.word	0x08001daf
 80017ac:	08001dcb 	.word	0x08001dcb

080017b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b09b      	sub	sp, #108	; 0x6c
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x22>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e2a5      	b.n	8001d1e <HAL_ADC_ConfigChannel+0x56e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f040 8289 	bne.w	8001cfc <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d81c      	bhi.n	800182c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	461a      	mov	r2, r3
 8001806:	231f      	movs	r3, #31
 8001808:	4093      	lsls	r3, r2
 800180a:	43db      	mvns	r3, r3
 800180c:	4019      	ands	r1, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6818      	ldr	r0, [r3, #0]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	4613      	mov	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	fa00 f203 	lsl.w	r2, r0, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	e063      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b09      	cmp	r3, #9
 8001832:	d81e      	bhi.n	8001872 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	3b1e      	subs	r3, #30
 8001848:	221f      	movs	r2, #31
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	4019      	ands	r1, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	3b1e      	subs	r3, #30
 8001864:	fa00 f203 	lsl.w	r2, r0, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
 8001870:	e040      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b0e      	cmp	r3, #14
 8001878:	d81e      	bhi.n	80018b8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685a      	ldr	r2, [r3, #4]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	3b3c      	subs	r3, #60	; 0x3c
 800188e:	221f      	movs	r2, #31
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	4019      	ands	r1, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	3b3c      	subs	r3, #60	; 0x3c
 80018aa:	fa00 f203 	lsl.w	r2, r0, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	639a      	str	r2, [r3, #56]	; 0x38
 80018b6:	e01d      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	3b5a      	subs	r3, #90	; 0x5a
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4019      	ands	r1, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6818      	ldr	r0, [r3, #0]
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	4413      	add	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	3b5a      	subs	r3, #90	; 0x5a
 80018e8:	fa00 f203 	lsl.w	r2, r0, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	430a      	orrs	r2, r1
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80e5 	bne.w	8001ace <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b09      	cmp	r3, #9
 800190a:	d91c      	bls.n	8001946 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6999      	ldr	r1, [r3, #24]
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4613      	mov	r3, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	4413      	add	r3, r2
 800191c:	3b1e      	subs	r3, #30
 800191e:	2207      	movs	r2, #7
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	4019      	ands	r1, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	6898      	ldr	r0, [r3, #8]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	3b1e      	subs	r3, #30
 8001938:	fa00 f203 	lsl.w	r2, r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	619a      	str	r2, [r3, #24]
 8001944:	e019      	b.n	800197a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6959      	ldr	r1, [r3, #20]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	4019      	ands	r1, r3
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6898      	ldr	r0, [r3, #8]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	fa00 f203 	lsl.w	r2, r0, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	695a      	ldr	r2, [r3, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	08db      	lsrs	r3, r3, #3
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	3b01      	subs	r3, #1
 8001998:	2b03      	cmp	r3, #3
 800199a:	d84f      	bhi.n	8001a3c <HAL_ADC_ConfigChannel+0x28c>
 800199c:	a201      	add	r2, pc, #4	; (adr r2, 80019a4 <HAL_ADC_ConfigChannel+0x1f4>)
 800199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a2:	bf00      	nop
 80019a4:	080019b5 	.word	0x080019b5
 80019a8:	080019d7 	.word	0x080019d7
 80019ac:	080019f9 	.word	0x080019f9
 80019b0:	08001a1b 	.word	0x08001a1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019ba:	4b9e      	ldr	r3, [pc, #632]	; (8001c34 <HAL_ADC_ConfigChannel+0x484>)
 80019bc:	4013      	ands	r3, r2
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	6812      	ldr	r2, [r2, #0]
 80019c2:	0691      	lsls	r1, r2, #26
 80019c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019c6:	430a      	orrs	r2, r1
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019d2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019d4:	e07e      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019dc:	4b95      	ldr	r3, [pc, #596]	; (8001c34 <HAL_ADC_ConfigChannel+0x484>)
 80019de:	4013      	ands	r3, r2
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	0691      	lsls	r1, r2, #26
 80019e6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019e8:	430a      	orrs	r2, r1
 80019ea:	431a      	orrs	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019f4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019f6:	e06d      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019fe:	4b8d      	ldr	r3, [pc, #564]	; (8001c34 <HAL_ADC_ConfigChannel+0x484>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	0691      	lsls	r1, r2, #26
 8001a08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a18:	e05c      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a20:	4b84      	ldr	r3, [pc, #528]	; (8001c34 <HAL_ADC_ConfigChannel+0x484>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	0691      	lsls	r1, r2, #26
 8001a2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a3a:	e04b      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	069b      	lsls	r3, r3, #26
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	069b      	lsls	r3, r3, #26
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d107      	bne.n	8001a84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	069b      	lsls	r3, r3, #26
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aa6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001aae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	069b      	lsls	r3, r3, #26
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d10a      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001acc:	e001      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001ace:	bf00      	nop
 8001ad0:	e000      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ad2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x344>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d101      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x344>
 8001af0:	2301      	movs	r3, #1
 8001af2:	e000      	b.n	8001af6 <HAL_ADC_ConfigChannel+0x346>
 8001af4:	2300      	movs	r3, #0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f040 810b 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d00f      	beq.n	8001b24 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b22:	e049      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	409a      	lsls	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b09      	cmp	r3, #9
 8001b44:	d91c      	bls.n	8001b80 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6999      	ldr	r1, [r3, #24]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4613      	mov	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	3b1b      	subs	r3, #27
 8001b58:	2207      	movs	r2, #7
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4019      	ands	r1, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	6898      	ldr	r0, [r3, #8]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	4413      	add	r3, r2
 8001b70:	3b1b      	subs	r3, #27
 8001b72:	fa00 f203 	lsl.w	r2, r0, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	619a      	str	r2, [r3, #24]
 8001b7e:	e01b      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6959      	ldr	r1, [r3, #20]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	4413      	add	r3, r2
 8001b92:	2207      	movs	r2, #7
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	4019      	ands	r1, r3
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	6898      	ldr	r0, [r3, #8]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	fa00 f203 	lsl.w	r2, r0, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_ADC_ConfigChannel+0x488>)
 8001bba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b10      	cmp	r3, #16
 8001bc2:	d105      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d015      	beq.n	8001bfc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bd4:	2b11      	cmp	r3, #17
 8001bd6:	d105      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00b      	beq.n	8001bfc <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001be8:	2b12      	cmp	r3, #18
 8001bea:	f040 8092 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f040 808b 	bne.w	8001d12 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c04:	d102      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x45c>
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_ADC_ConfigChannel+0x48c>)
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	e002      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x462>
 8001c0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c10:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d10f      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x490>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x490>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e007      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x492>
 8001c32:	bf00      	nop
 8001c34:	83fff000 	.word	0x83fff000
 8001c38:	50000300 	.word	0x50000300
 8001c3c:	50000100 	.word	0x50000100
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d150      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c46:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d010      	beq.n	8001c6e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d107      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x4b8>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x4b8>
 8001c64:	2301      	movs	r3, #1
 8001c66:	e000      	b.n	8001c6a <HAL_ADC_ConfigChannel+0x4ba>
 8001c68:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d13c      	bne.n	8001ce8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b10      	cmp	r3, #16
 8001c74:	d11d      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x502>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c7e:	d118      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c8c:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_ADC_ConfigChannel+0x57c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a27      	ldr	r2, [pc, #156]	; (8001d30 <HAL_ADC_ConfigChannel+0x580>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0c9a      	lsrs	r2, r3, #18
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ca2:	e002      	b.n	8001caa <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f9      	bne.n	8001ca4 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cb0:	e02e      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b11      	cmp	r3, #17
 8001cb8:	d10b      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x522>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cc2:	d106      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cd0:	e01e      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b12      	cmp	r3, #18
 8001cd8:	d11a      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ce4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ce6:	e013      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f043 0220 	orr.w	r2, r3, #32
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cfa:	e00a      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d00:	f043 0220 	orr.w	r2, r3, #32
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001d0e:	e000      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d10:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	376c      	adds	r7, #108	; 0x6c
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	431bde83 	.word	0x431bde83

08001d34 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d126      	bne.n	8001d9c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d115      	bne.n	8001d94 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d111      	bne.n	8001d94 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d105      	bne.n	8001d94 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0201 	orr.w	r2, r3, #1
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f7fe ff9b 	bl	8000cd0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d9a:	e004      	b.n	8001da6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	4798      	blx	r3
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f7ff f9c1 	bl	8001144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001dc2:	bf00      	nop
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	f043 0204 	orr.w	r2, r3, #4
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff f9b1 	bl	8001158 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d108      	bne.n	8001e2c <ADC_Enable+0x2c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <ADC_Enable+0x2c>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <ADC_Enable+0x2e>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d13c      	bne.n	8001eac <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <ADC_Enable+0xb8>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00d      	beq.n	8001e5c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f043 0210 	orr.w	r2, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e028      	b.n	8001eae <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e6c:	f7ff f95e 	bl	800112c <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e72:	e014      	b.n	8001e9e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e74:	f7ff f95a 	bl	800112c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d90d      	bls.n	8001e9e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f043 0210 	orr.w	r2, r3, #16
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f043 0201 	orr.w	r2, r3, #1
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e007      	b.n	8001eae <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d1e3      	bne.n	8001e74 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	8000003f 	.word	0x8000003f

08001ebc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d108      	bne.n	8001ee8 <ADC_Disable+0x2c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d101      	bne.n	8001ee8 <ADC_Disable+0x2c>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <ADC_Disable+0x2e>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d040      	beq.n	8001f70 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030d 	and.w	r3, r3, #13
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d10f      	bne.n	8001f1c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0202 	orr.w	r2, r2, #2
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2203      	movs	r2, #3
 8001f12:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f14:	f7ff f90a 	bl	800112c <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f1a:	e022      	b.n	8001f62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f043 0210 	orr.w	r2, r3, #16
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e01c      	b.n	8001f72 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f38:	f7ff f8f8 	bl	800112c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d90d      	bls.n	8001f62 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f043 0210 	orr.w	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	f043 0201 	orr.w	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e007      	b.n	8001f72 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d0e3      	beq.n	8001f38 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0ed      	b.n	8002168 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d102      	bne.n	8001f9e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7fe ffb9 	bl	8000f10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0202 	bic.w	r2, r2, #2
 8001fac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fae:	f7ff f8bd 	bl	800112c <HAL_GetTick>
 8001fb2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fb4:	e012      	b.n	8001fdc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fb6:	f7ff f8b9 	bl	800112c <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b0a      	cmp	r3, #10
 8001fc2:	d90b      	bls.n	8001fdc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2205      	movs	r2, #5
 8001fd4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0c5      	b.n	8002168 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1e5      	bne.n	8001fb6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f042 0201 	orr.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffa:	f7ff f897 	bl	800112c <HAL_GetTick>
 8001ffe:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002000:	e012      	b.n	8002028 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002002:	f7ff f893 	bl	800112c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b0a      	cmp	r3, #10
 800200e:	d90b      	bls.n	8002028 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2205      	movs	r2, #5
 8002020:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e09f      	b.n	8002168 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0e5      	beq.n	8002002 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	7e1b      	ldrb	r3, [r3, #24]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	e007      	b.n	8002060 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7e5b      	ldrb	r3, [r3, #25]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d108      	bne.n	800207a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e007      	b.n	800208a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	7e9b      	ldrb	r3, [r3, #26]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d108      	bne.n	80020a4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0220 	orr.w	r2, r2, #32
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	e007      	b.n	80020b4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0220 	bic.w	r2, r2, #32
 80020b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	7edb      	ldrb	r3, [r3, #27]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d108      	bne.n	80020ce <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0210 	bic.w	r2, r2, #16
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e007      	b.n	80020de <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 0210 	orr.w	r2, r2, #16
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7f1b      	ldrb	r3, [r3, #28]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0208 	orr.w	r2, r2, #8
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e007      	b.n	8002108 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0208 	bic.w	r2, r2, #8
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7f5b      	ldrb	r3, [r3, #29]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d108      	bne.n	8002122 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0204 	orr.w	r2, r2, #4
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	e007      	b.n	8002132 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0204 	bic.w	r2, r2, #4
 8002130:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	ea42 0103 	orr.w	r1, r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	1e5a      	subs	r2, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800218c:	4013      	ands	r3, r2
 800218e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800219c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021a2:	4a04      	ldr	r2, [pc, #16]	; (80021b4 <__NVIC_SetPriorityGrouping+0x44>)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <__NVIC_GetPriorityGrouping+0x18>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0307 	and.w	r3, r3, #7
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	db0b      	blt.n	80021fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	f003 021f 	and.w	r2, r3, #31
 80021ec:	4907      	ldr	r1, [pc, #28]	; (800220c <__NVIC_EnableIRQ+0x38>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	095b      	lsrs	r3, r3, #5
 80021f4:	2001      	movs	r0, #1
 80021f6:	fa00 f202 	lsl.w	r2, r0, r2
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000e100 	.word	0xe000e100

08002210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800221c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	db0a      	blt.n	800223a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	b2da      	uxtb	r2, r3
 8002228:	490c      	ldr	r1, [pc, #48]	; (800225c <__NVIC_SetPriority+0x4c>)
 800222a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222e:	0112      	lsls	r2, r2, #4
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	440b      	add	r3, r1
 8002234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002238:	e00a      	b.n	8002250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <__NVIC_SetPriority+0x50>)
 8002240:	79fb      	ldrb	r3, [r7, #7]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	3b04      	subs	r3, #4
 8002248:	0112      	lsls	r2, r2, #4
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	440b      	add	r3, r1
 800224e:	761a      	strb	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000e100 	.word	0xe000e100
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f1c3 0307 	rsb	r3, r3, #7
 800227e:	2b04      	cmp	r3, #4
 8002280:	bf28      	it	cs
 8002282:	2304      	movcs	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3304      	adds	r3, #4
 800228a:	2b06      	cmp	r3, #6
 800228c:	d902      	bls.n	8002294 <NVIC_EncodePriority+0x30>
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3b03      	subs	r3, #3
 8002292:	e000      	b.n	8002296 <NVIC_EncodePriority+0x32>
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	f04f 32ff 	mov.w	r2, #4294967295
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fa02 f303 	lsl.w	r3, r2, r3
 80022a2:	43da      	mvns	r2, r3
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	fa01 f303 	lsl.w	r3, r1, r3
 80022b6:	43d9      	mvns	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022bc:	4313      	orrs	r3, r2
         );
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3724      	adds	r7, #36	; 0x24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff8e 	bl	8002210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff29 	bl	8002170 <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff3e 	bl	80021b8 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff8e 	bl	8002264 <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff5d 	bl	8002210 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff31 	bl	80021d4 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ffa2 	bl	80022cc <SysTick_Config>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002392:	b580      	push	{r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e037      	b.n	8002418 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f940 	bl	8002680 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}  
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Start_IT+0x20>
 800243c:	2302      	movs	r3, #2
 800243e:	e04a      	b.n	80024d6 <HAL_DMA_Start_IT+0xb6>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800244e:	2b01      	cmp	r3, #1
 8002450:	d13a      	bne.n	80024c8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2202      	movs	r2, #2
 8002456:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0201 	bic.w	r2, r2, #1
 800246e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8d4 	bl	8002624 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d008      	beq.n	8002496 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 020e 	orr.w	r2, r2, #14
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e00f      	b.n	80024b6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 020a 	orr.w	r2, r2, #10
 80024a4:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0204 	bic.w	r2, r2, #4
 80024b4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0201 	orr.w	r2, r2, #1
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	e005      	b.n	80024d4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
 80024d2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80024d4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80024d6:	4618      	mov	r0, r3
 80024d8:	3718      	adds	r7, #24
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2204      	movs	r2, #4
 80024fc:	409a      	lsls	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d024      	beq.n	8002550 <HAL_DMA_IRQHandler+0x72>
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01f      	beq.n	8002550 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d107      	bne.n	800252e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f022 0204 	bic.w	r2, r2, #4
 800252c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	2104      	movs	r1, #4
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d06a      	beq.n	800261c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800254e:	e065      	b.n	800261c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002554:	2202      	movs	r2, #2
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02c      	beq.n	80025ba <HAL_DMA_IRQHandler+0xdc>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d027      	beq.n	80025ba <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0320 	and.w	r3, r3, #32
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10b      	bne.n	8002590 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 020a 	bic.w	r2, r2, #10
 8002586:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	2102      	movs	r1, #2
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d035      	beq.n	800261c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025b8:	e030      	b.n	800261c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2208      	movs	r2, #8
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <HAL_DMA_IRQHandler+0x13e>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d023      	beq.n	800261c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 020e 	bic.w	r2, r2, #14
 80025e2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260e:	2b00      	cmp	r3, #0
 8002610:	d004      	beq.n	800261c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	4798      	blx	r3
    }
  }
}  
 800261a:	e7ff      	b.n	800261c <HAL_DMA_IRQHandler+0x13e>
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	2101      	movs	r1, #1
 800263c:	fa01 f202 	lsl.w	r2, r1, r2
 8002640:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b10      	cmp	r3, #16
 8002650:	d108      	bne.n	8002664 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002662:	e007      	b.n	8002674 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	60da      	str	r2, [r3, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4b09      	ldr	r3, [pc, #36]	; (80026b4 <DMA_CalcBaseAndBitshift+0x34>)
 8002690:	4413      	add	r3, r2
 8002692:	4a09      	ldr	r2, [pc, #36]	; (80026b8 <DMA_CalcBaseAndBitshift+0x38>)
 8002694:	fba2 2303 	umull	r2, r3, r2, r3
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	009a      	lsls	r2, r3, #2
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a06      	ldr	r2, [pc, #24]	; (80026bc <DMA_CalcBaseAndBitshift+0x3c>)
 80026a4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	bffdfff8 	.word	0xbffdfff8
 80026b8:	cccccccd 	.word	0xcccccccd
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ce:	e14e      	b.n	800296e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8140 	beq.w	8002968 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d00b      	beq.n	8002708 <HAL_GPIO_Init+0x48>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d007      	beq.n	8002708 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026fc:	2b11      	cmp	r3, #17
 80026fe:	d003      	beq.n	8002708 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b12      	cmp	r3, #18
 8002706:	d130      	bne.n	800276a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	2203      	movs	r2, #3
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4013      	ands	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	4313      	orrs	r3, r2
 8002730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800273e:	2201      	movs	r2, #1
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0201 	and.w	r2, r3, #1
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	2203      	movs	r2, #3
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43db      	mvns	r3, r3
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4013      	ands	r3, r2
 8002780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	689a      	ldr	r2, [r3, #8]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_Init+0xea>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b12      	cmp	r3, #18
 80027a8:	d123      	bne.n	80027f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 809a 	beq.w	8002968 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_GPIO_Init+0x2cc>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a54      	ldr	r2, [pc, #336]	; (800298c <HAL_GPIO_Init+0x2cc>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b52      	ldr	r3, [pc, #328]	; (800298c <HAL_GPIO_Init+0x2cc>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800284c:	4a50      	ldr	r2, [pc, #320]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002876:	d013      	beq.n	80028a0 <HAL_GPIO_Init+0x1e0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a46      	ldr	r2, [pc, #280]	; (8002994 <HAL_GPIO_Init+0x2d4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00d      	beq.n	800289c <HAL_GPIO_Init+0x1dc>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_GPIO_Init+0x2d8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <HAL_GPIO_Init+0x1d8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a44      	ldr	r2, [pc, #272]	; (800299c <HAL_GPIO_Init+0x2dc>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d101      	bne.n	8002894 <HAL_GPIO_Init+0x1d4>
 8002890:	2303      	movs	r3, #3
 8002892:	e006      	b.n	80028a2 <HAL_GPIO_Init+0x1e2>
 8002894:	2305      	movs	r3, #5
 8002896:	e004      	b.n	80028a2 <HAL_GPIO_Init+0x1e2>
 8002898:	2302      	movs	r3, #2
 800289a:	e002      	b.n	80028a2 <HAL_GPIO_Init+0x1e2>
 800289c:	2301      	movs	r3, #1
 800289e:	e000      	b.n	80028a2 <HAL_GPIO_Init+0x1e2>
 80028a0:	2300      	movs	r3, #0
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	f002 0203 	and.w	r2, r2, #3
 80028a8:	0092      	lsls	r2, r2, #2
 80028aa:	4093      	lsls	r3, r2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028b2:	4937      	ldr	r1, [pc, #220]	; (8002990 <HAL_GPIO_Init+0x2d0>)
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c0:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	43db      	mvns	r3, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4013      	ands	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d003      	beq.n	80028e4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028e4:	4a2e      	ldr	r2, [pc, #184]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028ea:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800290e:	4a24      	ldr	r2, [pc, #144]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002938:	4a19      	ldr	r2, [pc, #100]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800293e:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	43db      	mvns	r3, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002962:	4a0f      	ldr	r2, [pc, #60]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	3301      	adds	r3, #1
 800296c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	fa22 f303 	lsr.w	r3, r2, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	f47f aea9 	bne.w	80026d0 <HAL_GPIO_Init+0x10>
  }
}
 800297e:	bf00      	nop
 8002980:	bf00      	nop
 8002982:	371c      	adds	r7, #28
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	40021000 	.word	0x40021000
 8002990:	40010000 	.word	0x40010000
 8002994:	48000400 	.word	0x48000400
 8002998:	48000800 	.word	0x48000800
 800299c:	48000c00 	.word	0x48000c00
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029da:	af00      	add	r7, sp, #0
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f000 bef4 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 816a 	beq.w	8002cd2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029fe:	4bb3      	ldr	r3, [pc, #716]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	d00c      	beq.n	8002a24 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a0a:	4bb0      	ldr	r3, [pc, #704]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d159      	bne.n	8002aca <HAL_RCC_OscConfig+0xf6>
 8002a16:	4bad      	ldr	r3, [pc, #692]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a22:	d152      	bne.n	8002aca <HAL_RCC_OscConfig+0xf6>
 8002a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a28:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a38:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	fab3 f383 	clz	r3, r3
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_RCC_OscConfig+0x82>
 8002a50:	4b9e      	ldr	r3, [pc, #632]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0xae>
 8002a56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a72:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a7e:	4b93      	ldr	r3, [pc, #588]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a86:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a8a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a8e:	fa92 f2a2 	rbit	r2, r2
 8002a92:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a96:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a9a:	fab2 f282 	clz	r2, r2
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	f042 0220 	orr.w	r2, r2, #32
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	f002 021f 	and.w	r2, r2, #31
 8002aaa:	2101      	movs	r1, #1
 8002aac:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 810c 	beq.w	8002cd0 <HAL_RCC_OscConfig+0x2fc>
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 8106 	bne.w	8002cd0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f000 be86 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad4:	d106      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x110>
 8002ad6:	4b7d      	ldr	r3, [pc, #500]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a7c      	ldr	r2, [pc, #496]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae0:	6013      	str	r3, [r2, #0]
 8002ae2:	e030      	b.n	8002b46 <HAL_RCC_OscConfig+0x172>
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10c      	bne.n	8002b08 <HAL_RCC_OscConfig+0x134>
 8002aee:	4b77      	ldr	r3, [pc, #476]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a76      	ldr	r2, [pc, #472]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b74      	ldr	r3, [pc, #464]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a73      	ldr	r2, [pc, #460]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	e01e      	b.n	8002b46 <HAL_RCC_OscConfig+0x172>
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b12:	d10c      	bne.n	8002b2e <HAL_RCC_OscConfig+0x15a>
 8002b14:	4b6d      	ldr	r3, [pc, #436]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a6c      	ldr	r2, [pc, #432]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b6a      	ldr	r3, [pc, #424]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a69      	ldr	r2, [pc, #420]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	e00b      	b.n	8002b46 <HAL_RCC_OscConfig+0x172>
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a66      	ldr	r2, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b38:	6013      	str	r3, [r2, #0]
 8002b3a:	4b64      	ldr	r3, [pc, #400]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a63      	ldr	r2, [pc, #396]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b44:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b46:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	1d3b      	adds	r3, r7, #4
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	495d      	ldr	r1, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b5a:	1d3b      	adds	r3, r7, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d059      	beq.n	8002c18 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fae2 	bl	800112c <HAL_GetTick>
 8002b68:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fadd 	bl	800112c <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b64      	cmp	r3, #100	; 0x64
 8002b7c:	d902      	bls.n	8002b84 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	f000 be29 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>
 8002b84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b88:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b98:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d102      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x1e2>
 8002bb0:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	e015      	b.n	8002be2 <HAL_RCC_OscConfig+0x20e>
 8002bb6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bba:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bce:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bd2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bd6:	fa93 f3a3 	rbit	r3, r3
 8002bda:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002be6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bea:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bee:	fa92 f2a2 	rbit	r2, r2
 8002bf2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002bf6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bfa:	fab2 f282 	clz	r2, r2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	f042 0220 	orr.w	r2, r2, #32
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	f002 021f 	and.w	r2, r2, #31
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0ab      	beq.n	8002b6e <HAL_RCC_OscConfig+0x19a>
 8002c16:	e05c      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fa88 	bl	800112c <HAL_GetTick>
 8002c1c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c22:	f7fe fa83 	bl	800112c <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b64      	cmp	r3, #100	; 0x64
 8002c30:	d902      	bls.n	8002c38 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	f000 bdcf 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>
 8002c38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c3c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c4c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f043 0301 	orr.w	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d102      	bne.n	8002c6a <HAL_RCC_OscConfig+0x296>
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	e015      	b.n	8002c96 <HAL_RCC_OscConfig+0x2c2>
 8002c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c6e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c76:	fa93 f3a3 	rbit	r3, r3
 8002c7a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c82:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c92:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_RCC_OscConfig+0x2f8>)
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c9a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c9e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002ca2:	fa92 f2a2 	rbit	r2, r2
 8002ca6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002caa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002cae:	fab2 f282 	clz	r2, r2
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f042 0220 	orr.w	r2, r2, #32
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	f002 021f 	and.w	r2, r2, #31
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ab      	bne.n	8002c22 <HAL_RCC_OscConfig+0x24e>
 8002cca:	e002      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2fe>
 8002ccc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 816f 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ce2:	4bd0      	ldr	r3, [pc, #832]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00b      	beq.n	8002d06 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cee:	4bcd      	ldr	r3, [pc, #820]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d16c      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x400>
 8002cfa:	4bca      	ldr	r3, [pc, #808]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d166      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x400>
 8002d06:	2302      	movs	r3, #2
 8002d08:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d10:	fa93 f3a3 	rbit	r3, r3
 8002d14:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_OscConfig+0x362>
 8002d30:	4bbc      	ldr	r3, [pc, #752]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	e013      	b.n	8002d5e <HAL_RCC_OscConfig+0x38a>
 8002d36:	2302      	movs	r3, #2
 8002d38:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d40:	fa93 f3a3 	rbit	r3, r3
 8002d44:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d48:	2302      	movs	r3, #2
 8002d4a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d5a:	4bb2      	ldr	r3, [pc, #712]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d64:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d68:	fa92 f2a2 	rbit	r2, r2
 8002d6c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d70:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d74:	fab2 f282 	clz	r2, r2
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	f042 0220 	orr.w	r2, r2, #32
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	f002 021f 	and.w	r2, r2, #31
 8002d84:	2101      	movs	r1, #1
 8002d86:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d007      	beq.n	8002da0 <HAL_RCC_OscConfig+0x3cc>
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d002      	beq.n	8002da0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f000 bd1b 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da0:	4ba0      	ldr	r3, [pc, #640]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	21f8      	movs	r1, #248	; 0xf8
 8002db0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002db8:	fa91 f1a1 	rbit	r1, r1
 8002dbc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002dc0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002dc4:	fab1 f181 	clz	r1, r1
 8002dc8:	b2c9      	uxtb	r1, r1
 8002dca:	408b      	lsls	r3, r1
 8002dcc:	4995      	ldr	r1, [pc, #596]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd2:	e0f5      	b.n	8002fc0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 8085 	beq.w	8002eea <HAL_RCC_OscConfig+0x516>
 8002de0:	2301      	movs	r3, #1
 8002de2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002df2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	461a      	mov	r2, r3
 8002e08:	2301      	movs	r3, #1
 8002e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe f98e 	bl	800112c <HAL_GetTick>
 8002e10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e14:	e00a      	b.n	8002e2c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fe f989 	bl	800112c <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d902      	bls.n	8002e2c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	f000 bcd5 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_OscConfig+0x488>
 8002e56:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	e013      	b.n	8002e84 <HAL_RCC_OscConfig+0x4b0>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e8e:	fa92 f2a2 	rbit	r2, r2
 8002e92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f002 021f 	and.w	r2, r2, #31
 8002eaa:	2101      	movs	r1, #1
 8002eac:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0af      	beq.n	8002e16 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b5b      	ldr	r3, [pc, #364]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ebe:	1d3b      	adds	r3, r7, #4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	21f8      	movs	r1, #248	; 0xf8
 8002ec6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ece:	fa91 f1a1 	rbit	r1, r1
 8002ed2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ed6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002eda:	fab1 f181 	clz	r1, r1
 8002ede:	b2c9      	uxtb	r1, r1
 8002ee0:	408b      	lsls	r3, r1
 8002ee2:	4950      	ldr	r1, [pc, #320]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	600b      	str	r3, [r1, #0]
 8002ee8:	e06a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x5ec>
 8002eea:	2301      	movs	r3, #1
 8002eec:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002efc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f00:	fab3 f383 	clz	r3, r3
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f0a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	461a      	mov	r2, r3
 8002f12:	2300      	movs	r3, #0
 8002f14:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f16:	f7fe f909 	bl	800112c <HAL_GetTick>
 8002f1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e00a      	b.n	8002f36 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f20:	f7fe f904 	bl	800112c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d902      	bls.n	8002f36 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	f000 bc50 	b.w	80037d6 <HAL_RCC_OscConfig+0xe02>
 8002f36:	2302      	movs	r3, #2
 8002f38:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f40:	fa93 f3a3 	rbit	r3, r3
 8002f44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	095b      	lsrs	r3, r3, #5
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d102      	bne.n	8002f66 <HAL_RCC_OscConfig+0x592>
 8002f60:	4b30      	ldr	r3, [pc, #192]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	e013      	b.n	8002f8e <HAL_RCC_OscConfig+0x5ba>
 8002f66:	2302      	movs	r3, #2
 8002f68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f70:	fa93 f3a3 	rbit	r3, r3
 8002f74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f78:	2302      	movs	r3, #2
 8002f7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_RCC_OscConfig+0x650>)
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f94:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f98:	fa92 f2a2 	rbit	r2, r2
 8002f9c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002fa0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002fa4:	fab2 f282 	clz	r2, r2
 8002fa8:	b2d2      	uxtb	r2, r2
 8002faa:	f042 0220 	orr.w	r2, r2, #32
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	f002 021f 	and.w	r2, r2, #31
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fba:	4013      	ands	r3, r2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1af      	bne.n	8002f20 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80da 	beq.w	8003184 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fd0:	1d3b      	adds	r3, r7, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d069      	beq.n	80030ae <HAL_RCC_OscConfig+0x6da>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fe4:	fa93 f3a3 	rbit	r3, r3
 8002fe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <HAL_RCC_OscConfig+0x654>)
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	461a      	mov	r2, r3
 8003000:	2301      	movs	r3, #1
 8003002:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fe f892 	bl	800112c <HAL_GetTick>
 8003008:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300c:	e00e      	b.n	800302c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe f88d 	bl	800112c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d906      	bls.n	800302c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e3d9      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	10908120 	.word	0x10908120
 800302c:	2302      	movs	r3, #2
 800302e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800303e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003042:	2202      	movs	r2, #2
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	fa93 f2a3 	rbit	r2, r3
 8003050:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800305a:	2202      	movs	r2, #2
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800306c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4ba5      	ldr	r3, [pc, #660]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003070:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003072:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003076:	2102      	movs	r1, #2
 8003078:	6019      	str	r1, [r3, #0]
 800307a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fa93 f1a3 	rbit	r1, r3
 8003084:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003088:	6019      	str	r1, [r3, #0]
  return result;
 800308a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800309a:	b2db      	uxtb	r3, r3
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0b0      	beq.n	800300e <HAL_RCC_OscConfig+0x63a>
 80030ac:	e06a      	b.n	8003184 <HAL_RCC_OscConfig+0x7b0>
 80030ae:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030b2:	2201      	movs	r2, #1
 80030b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	fa93 f2a3 	rbit	r2, r3
 80030c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030c4:	601a      	str	r2, [r3, #0]
  return result;
 80030c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030ca:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	fab3 f383 	clz	r3, r3
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b8c      	ldr	r3, [pc, #560]	; (8003308 <HAL_RCC_OscConfig+0x934>)
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	461a      	mov	r2, r3
 80030dc:	2300      	movs	r3, #0
 80030de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030e0:	f7fe f824 	bl	800112c <HAL_GetTick>
 80030e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	e009      	b.n	80030fe <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ea:	f7fe f81f 	bl	800112c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e36b      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 80030fe:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003102:	2202      	movs	r2, #2
 8003104:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	fa93 f2a3 	rbit	r2, r3
 8003110:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003114:	601a      	str	r2, [r3, #0]
 8003116:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800311a:	2202      	movs	r2, #2
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	fa93 f2a3 	rbit	r2, r3
 8003128:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003132:	2202      	movs	r2, #2
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	fa93 f2a3 	rbit	r2, r3
 8003140:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003144:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003146:	4b6f      	ldr	r3, [pc, #444]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800314a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800314e:	2102      	movs	r1, #2
 8003150:	6019      	str	r1, [r3, #0]
 8003152:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fa93 f1a3 	rbit	r1, r3
 800315c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003160:	6019      	str	r1, [r3, #0]
  return result;
 8003162:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	fab3 f383 	clz	r3, r3
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	2101      	movs	r1, #1
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	4013      	ands	r3, r2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1b2      	bne.n	80030ea <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003184:	1d3b      	adds	r3, r7, #4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	f000 8158 	beq.w	8003444 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800319a:	4b5a      	ldr	r3, [pc, #360]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d112      	bne.n	80031cc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b57      	ldr	r3, [pc, #348]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	4a56      	ldr	r2, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	61d3      	str	r3, [r2, #28]
 80031b2:	4b54      	ldr	r3, [pc, #336]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <HAL_RCC_OscConfig+0x938>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11a      	bne.n	800320e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031d8:	4b4c      	ldr	r3, [pc, #304]	; (800330c <HAL_RCC_OscConfig+0x938>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_RCC_OscConfig+0x938>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031e4:	f7fd ffa2 	bl	800112c <HAL_GetTick>
 80031e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	e009      	b.n	8003202 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ee:	f7fd ff9d 	bl	800112c <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	; 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e2e9      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_RCC_OscConfig+0x938>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ef      	beq.n	80031ee <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800320e:	1d3b      	adds	r3, r7, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d106      	bne.n	8003226 <HAL_RCC_OscConfig+0x852>
 8003218:	4b3a      	ldr	r3, [pc, #232]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	4a39      	ldr	r2, [pc, #228]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 800321e:	f043 0301 	orr.w	r3, r3, #1
 8003222:	6213      	str	r3, [r2, #32]
 8003224:	e02f      	b.n	8003286 <HAL_RCC_OscConfig+0x8b2>
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10c      	bne.n	800324a <HAL_RCC_OscConfig+0x876>
 8003230:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	4a33      	ldr	r2, [pc, #204]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003236:	f023 0301 	bic.w	r3, r3, #1
 800323a:	6213      	str	r3, [r2, #32]
 800323c:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	4a30      	ldr	r2, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003242:	f023 0304 	bic.w	r3, r3, #4
 8003246:	6213      	str	r3, [r2, #32]
 8003248:	e01d      	b.n	8003286 <HAL_RCC_OscConfig+0x8b2>
 800324a:	1d3b      	adds	r3, r7, #4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d10c      	bne.n	800326e <HAL_RCC_OscConfig+0x89a>
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003256:	6a1b      	ldr	r3, [r3, #32]
 8003258:	4a2a      	ldr	r2, [pc, #168]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	6213      	str	r3, [r2, #32]
 8003260:	4b28      	ldr	r3, [pc, #160]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	4a27      	ldr	r2, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6213      	str	r3, [r2, #32]
 800326c:	e00b      	b.n	8003286 <HAL_RCC_OscConfig+0x8b2>
 800326e:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003274:	f023 0301 	bic.w	r3, r3, #1
 8003278:	6213      	str	r3, [r2, #32]
 800327a:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 8003280:	f023 0304 	bic.w	r3, r3, #4
 8003284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003286:	1d3b      	adds	r3, r7, #4
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d06b      	beq.n	8003368 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003290:	f7fd ff4c 	bl	800112c <HAL_GetTick>
 8003294:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003298:	e00b      	b.n	80032b2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fd ff47 	bl	800112c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e291      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 80032b2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032b6:	2202      	movs	r2, #2
 80032b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	fa93 f2a3 	rbit	r2, r3
 80032c4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032ce:	2202      	movs	r2, #2
 80032d0:	601a      	str	r2, [r3, #0]
 80032d2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	fa93 f2a3 	rbit	r2, r3
 80032dc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032e0:	601a      	str	r2, [r3, #0]
  return result;
 80032e2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e8:	fab3 f383 	clz	r3, r3
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d109      	bne.n	8003310 <HAL_RCC_OscConfig+0x93c>
 80032fc:	4b01      	ldr	r3, [pc, #4]	; (8003304 <HAL_RCC_OscConfig+0x930>)
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x958>
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000
 8003308:	10908120 	.word	0x10908120
 800330c:	40007000 	.word	0x40007000
 8003310:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003314:	2202      	movs	r2, #2
 8003316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003318:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	fa93 f2a3 	rbit	r2, r3
 8003322:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	4bbb      	ldr	r3, [pc, #748]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003330:	2102      	movs	r1, #2
 8003332:	6011      	str	r1, [r2, #0]
 8003334:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	fa92 f1a2 	rbit	r1, r2
 800333e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003342:	6011      	str	r1, [r2, #0]
  return result;
 8003344:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003348:	6812      	ldr	r2, [r2, #0]
 800334a:	fab2 f282 	clz	r2, r2
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	f002 021f 	and.w	r2, r2, #31
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	4013      	ands	r3, r2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d099      	beq.n	800329a <HAL_RCC_OscConfig+0x8c6>
 8003366:	e063      	b.n	8003430 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003368:	f7fd fee0 	bl	800112c <HAL_GetTick>
 800336c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003370:	e00b      	b.n	800338a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fedb 	bl	800112c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e225      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 800338a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800338e:	2202      	movs	r2, #2
 8003390:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003392:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	fa93 f2a3 	rbit	r2, r3
 800339c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033a6:	2202      	movs	r2, #2
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	fa93 f2a3 	rbit	r2, r3
 80033b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033b8:	601a      	str	r2, [r3, #0]
  return result;
 80033ba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	f043 0302 	orr.w	r3, r3, #2
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d102      	bne.n	80033da <HAL_RCC_OscConfig+0xa06>
 80033d4:	4b90      	ldr	r3, [pc, #576]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	e00d      	b.n	80033f6 <HAL_RCC_OscConfig+0xa22>
 80033da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033de:	2202      	movs	r2, #2
 80033e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	fa93 f2a3 	rbit	r2, r3
 80033ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	4b89      	ldr	r3, [pc, #548]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033fa:	2102      	movs	r1, #2
 80033fc:	6011      	str	r1, [r2, #0]
 80033fe:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fa92 f1a2 	rbit	r1, r2
 8003408:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800340c:	6011      	str	r1, [r2, #0]
  return result;
 800340e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	f002 021f 	and.w	r2, r2, #31
 8003424:	2101      	movs	r1, #1
 8003426:	fa01 f202 	lsl.w	r2, r1, r2
 800342a:	4013      	ands	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1a0      	bne.n	8003372 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003430:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b77      	ldr	r3, [pc, #476]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a76      	ldr	r2, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003442:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003444:	1d3b      	adds	r3, r7, #4
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 81c2 	beq.w	80037d4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003450:	4b71      	ldr	r3, [pc, #452]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 030c 	and.w	r3, r3, #12
 8003458:	2b08      	cmp	r3, #8
 800345a:	f000 819c 	beq.w	8003796 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345e:	1d3b      	adds	r3, r7, #4
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	2b02      	cmp	r3, #2
 8003466:	f040 8114 	bne.w	8003692 <HAL_RCC_OscConfig+0xcbe>
 800346a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800346e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003472:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	fa93 f2a3 	rbit	r2, r3
 800347e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003482:	601a      	str	r2, [r3, #0]
  return result;
 8003484:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003488:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003494:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	461a      	mov	r2, r3
 800349c:	2300      	movs	r3, #0
 800349e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a0:	f7fd fe44 	bl	800112c <HAL_GetTick>
 80034a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034a8:	e009      	b.n	80034be <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034aa:	f7fd fe3f 	bl	800112c <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e18b      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 80034be:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	fa93 f2a3 	rbit	r2, r3
 80034d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034d6:	601a      	str	r2, [r3, #0]
  return result;
 80034d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	095b      	lsrs	r3, r3, #5
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d102      	bne.n	80034f8 <HAL_RCC_OscConfig+0xb24>
 80034f2:	4b49      	ldr	r3, [pc, #292]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	e01b      	b.n	8003530 <HAL_RCC_OscConfig+0xb5c>
 80034f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003502:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	fa93 f2a3 	rbit	r2, r3
 800350c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003516:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	4b3a      	ldr	r3, [pc, #232]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003534:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003538:	6011      	str	r1, [r2, #0]
 800353a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fa92 f1a2 	rbit	r1, r2
 8003544:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003548:	6011      	str	r1, [r2, #0]
  return result;
 800354a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	fab2 f282 	clz	r2, r2
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	f042 0220 	orr.w	r2, r2, #32
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	f002 021f 	and.w	r2, r2, #31
 8003560:	2101      	movs	r1, #1
 8003562:	fa01 f202 	lsl.w	r2, r1, r2
 8003566:	4013      	ands	r3, r2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d19e      	bne.n	80034aa <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003574:	1d3b      	adds	r3, r7, #4
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	430b      	orrs	r3, r1
 8003582:	4925      	ldr	r1, [pc, #148]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800358c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035a0:	601a      	str	r2, [r3, #0]
  return result;
 80035a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80035a6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035a8:	fab3 f383 	clz	r3, r3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035b2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	461a      	mov	r2, r3
 80035ba:	2301      	movs	r3, #1
 80035bc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fd fdb5 	bl	800112c <HAL_GetTick>
 80035c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035c6:	e009      	b.n	80035dc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c8:	f7fd fdb0 	bl	800112c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e0fc      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 80035dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	fa93 f2a3 	rbit	r2, r3
 80035f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035f4:	601a      	str	r2, [r3, #0]
  return result;
 80035f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035fa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035fc:	fab3 f383 	clz	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f043 0301 	orr.w	r3, r3, #1
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b01      	cmp	r3, #1
 800360e:	d105      	bne.n	800361c <HAL_RCC_OscConfig+0xc48>
 8003610:	4b01      	ldr	r3, [pc, #4]	; (8003618 <HAL_RCC_OscConfig+0xc44>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	e01e      	b.n	8003654 <HAL_RCC_OscConfig+0xc80>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003620:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003624:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	fa93 f2a3 	rbit	r2, r3
 8003630:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800363a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	fa93 f2a3 	rbit	r2, r3
 800364a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800364e:	601a      	str	r2, [r3, #0]
 8003650:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_OscConfig+0xe0c>)
 8003652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003654:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003658:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800365c:	6011      	str	r1, [r2, #0]
 800365e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	fa92 f1a2 	rbit	r1, r2
 8003668:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800366c:	6011      	str	r1, [r2, #0]
  return result;
 800366e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	fab2 f282 	clz	r2, r2
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	f042 0220 	orr.w	r2, r2, #32
 800367e:	b2d2      	uxtb	r2, r2
 8003680:	f002 021f 	and.w	r2, r2, #31
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d09b      	beq.n	80035c8 <HAL_RCC_OscConfig+0xbf4>
 8003690:	e0a0      	b.n	80037d4 <HAL_RCC_OscConfig+0xe00>
 8003692:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003696:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800369a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036aa:	601a      	str	r2, [r3, #0]
  return result;
 80036ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036b0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	461a      	mov	r2, r3
 80036c4:	2300      	movs	r3, #0
 80036c6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd fd30 	bl	800112c <HAL_GetTick>
 80036cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d0:	e009      	b.n	80036e6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d2:	f7fd fd2b 	bl	800112c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e077      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
 80036e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	fa93 f2a3 	rbit	r2, r3
 80036fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036fe:	601a      	str	r2, [r3, #0]
  return result;
 8003700:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003704:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003706:	fab3 f383 	clz	r3, r3
 800370a:	b2db      	uxtb	r3, r3
 800370c:	095b      	lsrs	r3, r3, #5
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b01      	cmp	r3, #1
 8003718:	d102      	bne.n	8003720 <HAL_RCC_OscConfig+0xd4c>
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <HAL_RCC_OscConfig+0xe0c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	e01b      	b.n	8003758 <HAL_RCC_OscConfig+0xd84>
 8003720:	f107 0320 	add.w	r3, r7, #32
 8003724:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f107 0320 	add.w	r3, r7, #32
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	fa93 f2a3 	rbit	r2, r3
 8003734:	f107 031c 	add.w	r3, r7, #28
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	f107 0318 	add.w	r3, r7, #24
 800373e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f107 0318 	add.w	r3, r7, #24
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fa93 f2a3 	rbit	r2, r3
 800374e:	f107 0314 	add.w	r3, r7, #20
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_OscConfig+0xe0c>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f107 0210 	add.w	r2, r7, #16
 800375c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	f107 0210 	add.w	r2, r7, #16
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	fa92 f1a2 	rbit	r1, r2
 800376c:	f107 020c 	add.w	r2, r7, #12
 8003770:	6011      	str	r1, [r2, #0]
  return result;
 8003772:	f107 020c 	add.w	r2, r7, #12
 8003776:	6812      	ldr	r2, [r2, #0]
 8003778:	fab2 f282 	clz	r2, r2
 800377c:	b2d2      	uxtb	r2, r2
 800377e:	f042 0220 	orr.w	r2, r2, #32
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f002 021f 	and.w	r2, r2, #31
 8003788:	2101      	movs	r1, #1
 800378a:	fa01 f202 	lsl.w	r2, r1, r2
 800378e:	4013      	ands	r3, r2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d19e      	bne.n	80036d2 <HAL_RCC_OscConfig+0xcfe>
 8003794:	e01e      	b.n	80037d4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003796:	1d3b      	adds	r3, r7, #4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e018      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_RCC_OscConfig+0xe0c>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037b4:	1d3b      	adds	r3, r7, #4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d108      	bne.n	80037d0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037be:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000

080037e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b09e      	sub	sp, #120	; 0x78
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e162      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037fc:	4b90      	ldr	r3, [pc, #576]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d910      	bls.n	800382c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b8d      	ldr	r3, [pc, #564]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	498b      	ldr	r1, [pc, #556]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b89      	ldr	r3, [pc, #548]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e14a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003838:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	497f      	ldr	r1, [pc, #508]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80dc 	beq.w	8003a10 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d13c      	bne.n	80038da <HAL_RCC_ClockConfig+0xf6>
 8003860:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003864:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800386e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_RCC_ClockConfig+0xa6>
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e00f      	b.n	80038aa <HAL_RCC_ClockConfig+0xc6>
 800388a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003890:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003892:	fa93 f3a3 	rbit	r3, r3
 8003896:	667b      	str	r3, [r7, #100]	; 0x64
 8003898:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800389c:	663b      	str	r3, [r7, #96]	; 0x60
 800389e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a0:	fa93 f3a3 	rbit	r3, r3
 80038a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038a6:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80038b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038b2:	fa92 f2a2 	rbit	r2, r2
 80038b6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038ba:	fab2 f282 	clz	r2, r2
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	f042 0220 	orr.w	r2, r2, #32
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	f002 021f 	and.w	r2, r2, #31
 80038ca:	2101      	movs	r1, #1
 80038cc:	fa01 f202 	lsl.w	r2, r1, r2
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d17b      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e0f3      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d13c      	bne.n	800395c <HAL_RCC_ClockConfig+0x178>
 80038e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ea:	fa93 f3a3 	rbit	r3, r3
 80038ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	fab3 f383 	clz	r3, r3
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	095b      	lsrs	r3, r3, #5
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	f043 0301 	orr.w	r3, r3, #1
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d102      	bne.n	800390c <HAL_RCC_ClockConfig+0x128>
 8003906:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	e00f      	b.n	800392c <HAL_RCC_ClockConfig+0x148>
 800390c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	647b      	str	r3, [r7, #68]	; 0x44
 800391a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391e:	643b      	str	r3, [r7, #64]	; 0x40
 8003920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003922:	fa93 f3a3 	rbit	r3, r3
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003930:	63ba      	str	r2, [r7, #56]	; 0x38
 8003932:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003934:	fa92 f2a2 	rbit	r2, r2
 8003938:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800393a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800393c:	fab2 f282 	clz	r2, r2
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	f042 0220 	orr.w	r2, r2, #32
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	f002 021f 	and.w	r2, r2, #31
 800394c:	2101      	movs	r1, #1
 800394e:	fa01 f202 	lsl.w	r2, r1, r2
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d13a      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b2      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
 800395c:	2302      	movs	r3, #2
 800395e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	fab3 f383 	clz	r3, r3
 800396e:	b2db      	uxtb	r3, r3
 8003970:	095b      	lsrs	r3, r3, #5
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	d102      	bne.n	8003984 <HAL_RCC_ClockConfig+0x1a0>
 800397e:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e00d      	b.n	80039a0 <HAL_RCC_ClockConfig+0x1bc>
 8003984:	2302      	movs	r3, #2
 8003986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	fa93 f3a3 	rbit	r3, r3
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
 8003990:	2302      	movs	r3, #2
 8003992:	623b      	str	r3, [r7, #32]
 8003994:	6a3b      	ldr	r3, [r7, #32]
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2202      	movs	r2, #2
 80039a2:	61ba      	str	r2, [r7, #24]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	fa92 f2a2 	rbit	r2, r2
 80039aa:	617a      	str	r2, [r7, #20]
  return result;
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	fab2 f282 	clz	r2, r2
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	f042 0220 	orr.w	r2, r2, #32
 80039b8:	b2d2      	uxtb	r2, r2
 80039ba:	f002 021f 	and.w	r2, r2, #31
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f202 	lsl.w	r2, r1, r2
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e079      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	491a      	ldr	r1, [pc, #104]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7fd fba4 	bl	800112c <HAL_GetTick>
 80039e4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7fd fba0 	bl	800112c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e061      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d214      	bcs.n	8003a48 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 0207 	bic.w	r2, r3, #7
 8003a26:	4906      	ldr	r1, [pc, #24]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2e:	4b04      	ldr	r3, [pc, #16]	; (8003a40 <HAL_RCC_ClockConfig+0x25c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e040      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x2de>
 8003a40:	40022000 	.word	0x40022000
 8003a44:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d008      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	491a      	ldr	r1, [pc, #104]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	4912      	ldr	r1, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a86:	f000 f829 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4601      	mov	r1, r0
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCC_ClockConfig+0x2e8>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a94:	22f0      	movs	r2, #240	; 0xf0
 8003a96:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	fa92 f2a2 	rbit	r2, r2
 8003a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	fab2 f282 	clz	r2, r2
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	40d3      	lsrs	r3, r2
 8003aaa:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x2ec>)
 8003aac:	5cd3      	ldrb	r3, [r2, r3]
 8003aae:	fa21 f303 	lsr.w	r3, r1, r3
 8003ab2:	4a08      	ldr	r2, [pc, #32]	; (8003ad4 <HAL_RCC_ClockConfig+0x2f0>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <HAL_RCC_ClockConfig+0x2f4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fd faf2 	bl	80010a4 <HAL_InitTick>
  
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3778      	adds	r7, #120	; 0x78
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08003e70 	.word	0x08003e70
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b08b      	sub	sp, #44	; 0x2c
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61fb      	str	r3, [r7, #28]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61bb      	str	r3, [r7, #24]
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003af6:	4b29      	ldr	r3, [pc, #164]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d002      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x30>
 8003b06:	2b08      	cmp	r3, #8
 8003b08:	d003      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x36>
 8003b0a:	e03c      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b0c:	4b24      	ldr	r3, [pc, #144]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b0e:	623b      	str	r3, [r7, #32]
      break;
 8003b10:	e03c      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b18:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b1c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	fa92 f2a2 	rbit	r2, r2
 8003b24:	607a      	str	r2, [r7, #4]
  return result;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	fab2 f282 	clz	r2, r2
 8003b2c:	b2d2      	uxtb	r2, r2
 8003b2e:	40d3      	lsrs	r3, r2
 8003b30:	4a1c      	ldr	r2, [pc, #112]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b32:	5cd3      	ldrb	r3, [r2, r3]
 8003b34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	220f      	movs	r2, #15
 8003b40:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	fa92 f2a2 	rbit	r2, r2
 8003b48:	60fa      	str	r2, [r7, #12]
  return result;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	40d3      	lsrs	r3, r2
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b56:	5cd3      	ldrb	r3, [r2, r3]
 8003b58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b64:	4a0e      	ldr	r2, [pc, #56]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	e004      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	4a0c      	ldr	r2, [pc, #48]	; (8003bac <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	623b      	str	r3, [r7, #32]
      break;
 8003b84:	e002      	b.n	8003b8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b88:	623b      	str	r3, [r7, #32]
      break;
 8003b8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	372c      	adds	r7, #44	; 0x2c
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	00f42400 	.word	0x00f42400
 8003ba4:	08003e80 	.word	0x08003e80
 8003ba8:	08003e90 	.word	0x08003e90
 8003bac:	003d0900 	.word	0x003d0900
 8003bb0:	007a1200 	.word	0x007a1200

08003bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b092      	sub	sp, #72	; 0x48
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80cd 	beq.w	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bd8:	4b86      	ldr	r3, [pc, #536]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10e      	bne.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b83      	ldr	r3, [pc, #524]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	4a82      	ldr	r2, [pc, #520]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	61d3      	str	r3, [r2, #28]
 8003bf0:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c02:	4b7d      	ldr	r3, [pc, #500]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d118      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c0e:	4b7a      	ldr	r3, [pc, #488]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a79      	ldr	r2, [pc, #484]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c18:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd fa87 	bl	800112c <HAL_GetTick>
 8003c1e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	e008      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c22:	f7fd fa83 	bl	800112c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b64      	cmp	r3, #100	; 0x64
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e0db      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b70      	ldr	r3, [pc, #448]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d07d      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d076      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5e:	4b65      	ldr	r3, [pc, #404]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c6c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	fa93 f3a3 	rbit	r3, r3
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c78:	fab3 f383 	clz	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b5e      	ldr	r3, [pc, #376]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	461a      	mov	r2, r3
 8003c88:	2301      	movs	r3, #1
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	fa93 f3a3 	rbit	r3, r3
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b55      	ldr	r3, [pc, #340]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	461a      	mov	r2, r3
 8003cac:	2300      	movs	r3, #0
 8003cae:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cb0:	4a50      	ldr	r2, [pc, #320]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d045      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc0:	f7fd fa34 	bl	800112c <HAL_GetTick>
 8003cc4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc6:	e00a      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc8:	f7fd fa30 	bl	800112c <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e086      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce4:	fa93 f3a3 	rbit	r3, r3
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cea:	2302      	movs	r3, #2
 8003cec:	623b      	str	r3, [r7, #32]
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	fa93 f3a3 	rbit	r3, r3
 8003cf4:	61fb      	str	r3, [r7, #28]
  return result;
 8003cf6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003d0c:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	e007      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d12:	2302      	movs	r3, #2
 8003d14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	fa93 f3a3 	rbit	r3, r3
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	4b35      	ldr	r3, [pc, #212]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	2202      	movs	r2, #2
 8003d24:	613a      	str	r2, [r7, #16]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	fa92 f2a2 	rbit	r2, r2
 8003d2c:	60fa      	str	r2, [r7, #12]
  return result;
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	fab2 f282 	clz	r2, r2
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	f002 021f 	and.w	r2, r2, #31
 8003d40:	2101      	movs	r1, #1
 8003d42:	fa01 f202 	lsl.w	r2, r1, r2
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0bd      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	4926      	ldr	r1, [pc, #152]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d105      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d66:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a22      	ldr	r2, [pc, #136]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d70:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d7e:	4b1d      	ldr	r3, [pc, #116]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	491a      	ldr	r1, [pc, #104]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0320 	and.w	r3, r3, #32
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d008      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d9c:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	f023 0210 	bic.w	r2, r3, #16
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	4912      	ldr	r1, [pc, #72]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d008      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dba:	4b0e      	ldr	r3, [pc, #56]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	490b      	ldr	r1, [pc, #44]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ddc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3748      	adds	r7, #72	; 0x48
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40007000 	.word	0x40007000
 8003dfc:	10908100 	.word	0x10908100

08003e00 <__libc_init_array>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	4d0d      	ldr	r5, [pc, #52]	; (8003e38 <__libc_init_array+0x38>)
 8003e04:	4c0d      	ldr	r4, [pc, #52]	; (8003e3c <__libc_init_array+0x3c>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	2600      	movs	r6, #0
 8003e0c:	42a6      	cmp	r6, r4
 8003e0e:	d109      	bne.n	8003e24 <__libc_init_array+0x24>
 8003e10:	4d0b      	ldr	r5, [pc, #44]	; (8003e40 <__libc_init_array+0x40>)
 8003e12:	4c0c      	ldr	r4, [pc, #48]	; (8003e44 <__libc_init_array+0x44>)
 8003e14:	f000 f820 	bl	8003e58 <_init>
 8003e18:	1b64      	subs	r4, r4, r5
 8003e1a:	10a4      	asrs	r4, r4, #2
 8003e1c:	2600      	movs	r6, #0
 8003e1e:	42a6      	cmp	r6, r4
 8003e20:	d105      	bne.n	8003e2e <__libc_init_array+0x2e>
 8003e22:	bd70      	pop	{r4, r5, r6, pc}
 8003e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e28:	4798      	blx	r3
 8003e2a:	3601      	adds	r6, #1
 8003e2c:	e7ee      	b.n	8003e0c <__libc_init_array+0xc>
 8003e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e32:	4798      	blx	r3
 8003e34:	3601      	adds	r6, #1
 8003e36:	e7f2      	b.n	8003e1e <__libc_init_array+0x1e>
 8003e38:	08003ea0 	.word	0x08003ea0
 8003e3c:	08003ea0 	.word	0x08003ea0
 8003e40:	08003ea0 	.word	0x08003ea0
 8003e44:	08003ea4 	.word	0x08003ea4

08003e48 <memset>:
 8003e48:	4402      	add	r2, r0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <memset+0xa>
 8003e50:	4770      	bx	lr
 8003e52:	f803 1b01 	strb.w	r1, [r3], #1
 8003e56:	e7f9      	b.n	8003e4c <memset+0x4>

08003e58 <_init>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr

08003e64 <_fini>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr
