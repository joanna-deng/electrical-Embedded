
Psyduck.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e90  08003e90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003e90  08003e90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e90  08003e90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e90  08003e90  00013e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e94  08003e94  00013e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000010  08003ea4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003ea4  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e59  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6a  00000000  00000000  00029e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  0002ba00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000760  00000000  00000000  0002c238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a56b  00000000  00000000  0002c998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a30c  00000000  00000000  00046f03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c5b4  00000000  00000000  0005120f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed7c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002190  00000000  00000000  000ed818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e48 	.word	0x08003e48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003e48 	.word	0x08003e48

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f000 fb7d 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f821 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 f959 	bl	8000c28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000976:	f000 f939 	bl	8000bec <MX_DMA_Init>
  MX_ADC2_Init();
 800097a:	f000 f879 	bl	8000a70 <MX_ADC2_Init>
  MX_CAN_Init();
 800097e:	f000 f8ff 	bl	8000b80 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2ConvertedValues, 64);
 8000982:	2240      	movs	r2, #64	; 0x40
 8000984:	4909      	ldr	r1, [pc, #36]	; (80009ac <main+0x48>)
 8000986:	480a      	ldr	r0, [pc, #40]	; (80009b0 <main+0x4c>)
 8000988:	f000 fe30 	bl	80015ec <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 800098c:	4808      	ldr	r0, [pc, #32]	; (80009b0 <main+0x4c>)
 800098e:	f000 fd77 	bl	8001480 <HAL_ADC_Start>
  uint8_t flag = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(flag > 0)
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d0fc      	beq.n	8000996 <main+0x32>
		  HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2101      	movs	r1, #1
 80009a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a4:	f001 fff6 	bl	8002994 <HAL_GPIO_WritePin>
	  if(flag > 0)
 80009a8:	e7f5      	b.n	8000996 <main+0x32>
 80009aa:	bf00      	nop
 80009ac:	2000010c 	.word	0x2000010c
 80009b0:	20000030 	.word	0x20000030

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b096      	sub	sp, #88	; 0x58
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009be:	2228      	movs	r2, #40	; 0x28
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f003 fa38 	bl	8003e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80009f2:	2301      	movs	r3, #1
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f6:	2301      	movs	r3, #1
 80009f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a04:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a08:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 ffd8 	bl	80029c4 <HAL_RCC_OscConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000a1a:	f000 f9dd 	bl	8000dd8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1e:	230f      	movs	r3, #15
 8000a20:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a22:	2302      	movs	r3, #2
 8000a24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	2102      	movs	r1, #2
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f002 feca 	bl	80037d4 <HAL_RCC_ClockConfig>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a46:	f000 f9c7 	bl	8000dd8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000a4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a52:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4618      	mov	r0, r3
 8000a58:	f003 f8a4 	bl	8003ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a62:	f000 f9b9 	bl	8000dd8 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	3758      	adds	r7, #88	; 0x58
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000a88:	4a3c      	ldr	r2, [pc, #240]	; (8000b7c <MX_ADC2_Init+0x10c>)
 8000a8a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a98:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ab2:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000abe:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000ac4:	4b2c      	ldr	r3, [pc, #176]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000acc:	4b2a      	ldr	r3, [pc, #168]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ace:	2204      	movs	r2, #4
 8000ad0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000ad2:	4b29      	ldr	r3, [pc, #164]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ad8:	4b27      	ldr	r3, [pc, #156]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ade:	4826      	ldr	r0, [pc, #152]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000ae0:	f000 fb3c 	bl	800115c <HAL_ADC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000aea:	f000 f975 	bl	8000dd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 8000afa:	2305      	movs	r3, #5
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481b      	ldr	r0, [pc, #108]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000b0c:	f000 fe48 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000b16:	f000 f95f 	bl	8000dd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b1e:	2302      	movs	r3, #2
 8000b20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	4814      	ldr	r0, [pc, #80]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000b28:	f000 fe3a 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f951 	bl	8000dd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b36:	2303      	movs	r3, #3
 8000b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	480d      	ldr	r0, [pc, #52]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000b44:	f000 fe2c 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC2_Init+0xe2>
  {
    Error_Handler();
 8000b4e:	f000 f943 	bl	8000dd8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000b52:	2304      	movs	r3, #4
 8000b54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b56:	2304      	movs	r3, #4
 8000b58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4806      	ldr	r0, [pc, #24]	; (8000b78 <MX_ADC2_Init+0x108>)
 8000b60:	f000 fe1e 	bl	80017a0 <HAL_ADC_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_ADC2_Init+0xfe>
  {
    Error_Handler();
 8000b6a:	f000 f935 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000030 	.word	0x20000030
 8000b7c:	50000100 	.word	0x50000100

08000b80 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000b84:	4b17      	ldr	r3, [pc, #92]	; (8000be4 <MX_CAN_Init+0x64>)
 8000b86:	4a18      	ldr	r2, [pc, #96]	; (8000be8 <MX_CAN_Init+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	; (8000be4 <MX_CAN_Init+0x64>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_CAN_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_CAN_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_CAN_Init+0x64>)
 8000b9e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ba2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_CAN_Init+0x64>)
 8000ba6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000baa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000bac:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000bc4:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	; (8000be4 <MX_CAN_Init+0x64>)
 8000bd2:	f001 f9ca 	bl	8001f6a <HAL_CAN_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000bdc:	f000 f8fc 	bl	8000dd8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000080 	.word	0x20000080
 8000be8:	40006400 	.word	0x40006400

08000bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_DMA_Init+0x38>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <MX_DMA_Init+0x38>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6153      	str	r3, [r2, #20]
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_DMA_Init+0x38>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	200c      	movs	r0, #12
 8000c10:	f001 fb81 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000c14:	200c      	movs	r0, #12
 8000c16:	f001 fb9a 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40021000 	.word	0x40021000

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_GPIO_Init+0x78>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <MX_GPIO_Init+0x78>)
 8000c44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c48:	6153      	str	r3, [r2, #20]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_GPIO_Init+0x78>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_GPIO_Init+0x78>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	4a11      	ldr	r2, [pc, #68]	; (8000ca0 <MX_GPIO_Init+0x78>)
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	6153      	str	r3, [r2, #20]
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_GPIO_Init+0x78>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CONTROL_GPIO_Port, CONTROL_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2101      	movs	r1, #1
 8000c72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c76:	f001 fe8d 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CONTROL_Pin */
  GPIO_InitStruct.Pin = CONTROL_Pin;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CONTROL_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	4619      	mov	r1, r3
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f001 fd0c 	bl	80026b0 <HAL_GPIO_Init>

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	; 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0; i < 3; i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	77fb      	strb	r3, [r7, #31]
 8000cb4:	e073      	b.n	8000d9e <HAL_ADC_ConvCpltCallback+0xf6>
		uint32_t sum = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61bb      	str	r3, [r7, #24]
		double mean = 0;
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	e9c7 2302 	strd	r2, r3, [r7, #8]

		for(uint8_t j=0; j < 16; j++) {
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	75fb      	strb	r3, [r7, #23]
 8000cca:	e00d      	b.n	8000ce8 <HAL_ADC_ConvCpltCallback+0x40>
			sum += ADC2ConvertedValues[i + 4*j];
 8000ccc:	7ffa      	ldrb	r2, [r7, #31]
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a3a      	ldr	r2, [pc, #232]	; (8000dc0 <HAL_ADC_ConvCpltCallback+0x118>)
 8000cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4413      	add	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
		for(uint8_t j=0; j < 16; j++) {
 8000ce2:	7dfb      	ldrb	r3, [r7, #23]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
 8000ce8:	7dfb      	ldrb	r3, [r7, #23]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d9ee      	bls.n	8000ccc <HAL_ADC_ConvCpltCallback+0x24>
		}

		mean = sum*3.3/65520; //Converting from ADC value to voltage
 8000cee:	69b8      	ldr	r0, [r7, #24]
 8000cf0:	f7ff fbac 	bl	800044c <__aeabi_ui2d>
 8000cf4:	a32e      	add	r3, pc, #184	; (adr r3, 8000db0 <HAL_ADC_ConvCpltCallback+0x108>)
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f7ff fc21 	bl	8000540 <__aeabi_dmul>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	460b      	mov	r3, r1
 8000d02:	4610      	mov	r0, r2
 8000d04:	4619      	mov	r1, r3
 8000d06:	a32c      	add	r3, pc, #176	; (adr r3, 8000db8 <HAL_ADC_ConvCpltCallback+0x110>)
 8000d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d0c:	f7ff fd42 	bl	8000794 <__aeabi_ddiv>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	e9c7 2302 	strd	r2, r3, [r7, #8]
		//i = 0, psi250 max. i=1, 2, psi100 max
		if(i < 1)
 8000d18:	7ffb      	ldrb	r3, [r7, #31]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d118      	bne.n	8000d50 <HAL_ADC_ConvCpltCallback+0xa8>
			pressure[i] = (mean*62.5) + 62.5;
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000d24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d28:	f7ff fc0a 	bl	8000540 <__aeabi_dmul>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	4610      	mov	r0, r2
 8000d32:	4619      	mov	r1, r3
 8000d34:	7ffc      	ldrb	r4, [r7, #31]
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <HAL_ADC_ConvCpltCallback+0x11c>)
 8000d3c:	f7ff fa4a 	bl	80001d4 <__adddf3>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <HAL_ADC_ConvCpltCallback+0x120>)
 8000d46:	00e1      	lsls	r1, r4, #3
 8000d48:	4401      	add	r1, r0
 8000d4a:	e9c1 2300 	strd	r2, r3, [r1]
 8000d4e:	e017      	b.n	8000d80 <HAL_ADC_ConvCpltCallback+0xd8>
		else
			pressure[i] = (mean*25) + 25;
 8000d50:	f04f 0200 	mov.w	r2, #0
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <HAL_ADC_ConvCpltCallback+0x124>)
 8000d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d5a:	f7ff fbf1 	bl	8000540 <__aeabi_dmul>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	460b      	mov	r3, r1
 8000d62:	4610      	mov	r0, r2
 8000d64:	4619      	mov	r1, r3
 8000d66:	7ffc      	ldrb	r4, [r7, #31]
 8000d68:	f04f 0200 	mov.w	r2, #0
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_ADC_ConvCpltCallback+0x124>)
 8000d6e:	f7ff fa31 	bl	80001d4 <__adddf3>
 8000d72:	4602      	mov	r2, r0
 8000d74:	460b      	mov	r3, r1
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <HAL_ADC_ConvCpltCallback+0x120>)
 8000d78:	00e1      	lsls	r1, r4, #3
 8000d7a:	4401      	add	r1, r0
 8000d7c:	e9c1 2300 	strd	r2, r3, [r1]
		//pressure[i] = (i < 1)((mean*62.5) + 62.5) + (i > 1)((mean*25) + 25);
		current = mean/50;
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_ADC_ConvCpltCallback+0x128>)
 8000d86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d8a:	f7ff fd03 	bl	8000794 <__aeabi_ddiv>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	4910      	ldr	r1, [pc, #64]	; (8000dd4 <HAL_ADC_ConvCpltCallback+0x12c>)
 8000d94:	e9c1 2300 	strd	r2, r3, [r1]
	for (uint8_t i=0; i < 3; i++) {
 8000d98:	7ffb      	ldrb	r3, [r7, #31]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	77fb      	strb	r3, [r7, #31]
 8000d9e:	7ffb      	ldrb	r3, [r7, #31]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d988      	bls.n	8000cb6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000da4:	bf00      	nop
 8000da6:	bf00      	nop
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd90      	pop	{r4, r7, pc}
 8000dae:	bf00      	nop
 8000db0:	66666666 	.word	0x66666666
 8000db4:	400a6666 	.word	0x400a6666
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	40effe00 	.word	0x40effe00
 8000dc0:	2000010c 	.word	0x2000010c
 8000dc4:	404f4000 	.word	0x404f4000
 8000dc8:	200000a8 	.word	0x200000a8
 8000dcc:	40390000 	.word	0x40390000
 8000dd0:	40490000 	.word	0x40490000
 8000dd4:	200000c0 	.word	0x200000c0

08000dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ddc:	b672      	cpsid	i
}
 8000dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <Error_Handler+0x8>
	...

08000de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_MspInit+0x44>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <HAL_MspInit+0x44>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <HAL_MspInit+0x44>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	607b      	str	r3, [r7, #4]
 8000e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_MspInit+0x44>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_MspInit+0x44>)
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61d3      	str	r3, [r2, #28]
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_MspInit+0x44>)
 8000e10:	69db      	ldr	r3, [r3, #28]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	603b      	str	r3, [r7, #0]
 8000e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40021000 	.word	0x40021000

08000e2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a29      	ldr	r2, [pc, #164]	; (8000ef0 <HAL_ADC_MspInit+0xc4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d14c      	bne.n	8000ee8 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000e4e:	4b29      	ldr	r3, [pc, #164]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e58:	6153      	str	r3, [r2, #20]
 8000e5a:	4b26      	ldr	r3, [pc, #152]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	613b      	str	r3, [r7, #16]
 8000e64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <HAL_ADC_MspInit+0xc8>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e7e:	23f0      	movs	r3, #240	; 0xf0
 8000e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e82:	2303      	movs	r3, #3
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f001 fc0c 	bl	80026b0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8000e98:	4b17      	ldr	r3, [pc, #92]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <HAL_ADC_MspInit+0xd0>)
 8000e9c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e9e:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000eac:	2280      	movs	r2, #128	; 0x80
 8000eae:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eb0:	4b11      	ldr	r3, [pc, #68]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000eba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ec2:	2220      	movs	r2, #32
 8000ec4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ece:	f001 fa58 	bl	8002382 <HAL_DMA_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000ed8:	f7ff ff7e 	bl	8000dd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a06      	ldr	r2, [pc, #24]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <HAL_ADC_MspInit+0xcc>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	50000100 	.word	0x50000100
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	200000c8 	.word	0x200000c8
 8000efc:	4002001c 	.word	0x4002001c

08000f00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <HAL_CAN_MspInit+0x80>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d129      	bne.n	8000f76 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <HAL_CAN_MspInit+0x84>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a17      	ldr	r2, [pc, #92]	; (8000f84 <HAL_CAN_MspInit+0x84>)
 8000f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_CAN_MspInit+0x84>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_CAN_MspInit+0x84>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_CAN_MspInit+0x84>)
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_CAN_MspInit+0x84>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000f64:	2309      	movs	r3, #9
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f72:	f001 fb9d 	bl	80026b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40006400 	.word	0x40006400
 8000f84:	40021000 	.word	0x40021000

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f88e 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <DMA1_Channel2_IRQHandler+0x10>)
 8000fe2:	f001 fa74 	bl	80024ce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200000c8 	.word	0x200000c8

08000ff0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <SystemInit+0x20>)
 8000ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <SystemInit+0x20>)
 8000ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800104c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800103e:	f7ff ffd7 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f002 fed5 	bl	8003df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001046:	f7ff fc8d 	bl	8000964 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800104c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001058:	08003e98 	.word	0x08003e98
  ldr r2, =_sbss
 800105c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001060:	20000190 	.word	0x20000190

08001064 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_2_IRQHandler>
	...

08001068 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x28>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x28>)
 8001072:	f043 0310 	orr.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f001 f941 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff feae 	bl	8000de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 f959 	bl	800236a <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f001 f921 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	2000018c 	.word	0x2000018c

0800111c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000018c 	.word	0x2000018c

08001134 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b09a      	sub	sp, #104	; 0x68
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800116a:	2300      	movs	r3, #0
 800116c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e172      	b.n	8001462 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	d176      	bne.n	800127c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d152      	bne.n	800123c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff fe3b 	bl	8000e2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d13b      	bne.n	800123c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 fe71 	bl	8001eac <ADC_Disable>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f003 0310 	and.w	r3, r3, #16
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d12f      	bne.n	800123c <HAL_ADC_Init+0xe0>
 80011dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d12b      	bne.n	800123c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ec:	f023 0302 	bic.w	r3, r3, #2
 80011f0:	f043 0202 	orr.w	r2, r3, #2
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001206:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001216:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001218:	4b94      	ldr	r3, [pc, #592]	; (800146c <HAL_ADC_Init+0x310>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a94      	ldr	r2, [pc, #592]	; (8001470 <HAL_ADC_Init+0x314>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0c9a      	lsrs	r2, r3, #18
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800122e:	e002      	b.n	8001236 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	3b01      	subs	r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f9      	bne.n	8001230 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d007      	beq.n	800125a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001258:	d110      	bne.n	800127c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f023 0312 	bic.w	r3, r3, #18
 8001262:	f043 0210 	orr.w	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f043 0201 	orr.w	r2, r3, #1
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001280:	f003 0310 	and.w	r3, r3, #16
 8001284:	2b00      	cmp	r3, #0
 8001286:	f040 80df 	bne.w	8001448 <HAL_ADC_Init+0x2ec>
 800128a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800128e:	2b00      	cmp	r3, #0
 8001290:	f040 80da 	bne.w	8001448 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f040 80d2 	bne.w	8001448 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012ac:	f043 0202 	orr.w	r2, r3, #2
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012b4:	4b6f      	ldr	r3, [pc, #444]	; (8001474 <HAL_ADC_Init+0x318>)
 80012b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012c0:	d102      	bne.n	80012c8 <HAL_ADC_Init+0x16c>
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_ADC_Init+0x31c>)
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	e002      	b.n	80012ce <HAL_ADC_Init+0x172>
 80012c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012cc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d108      	bne.n	80012ee <HAL_ADC_Init+0x192>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d101      	bne.n	80012ee <HAL_ADC_Init+0x192>
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_ADC_Init+0x194>
 80012ee:	2300      	movs	r3, #0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11c      	bne.n	800132e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d010      	beq.n	800131c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d107      	bne.n	8001316 <HAL_ADC_Init+0x1ba>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b01      	cmp	r3, #1
 8001310:	d101      	bne.n	8001316 <HAL_ADC_Init+0x1ba>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <HAL_ADC_Init+0x1bc>
 8001316:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001318:	2b00      	cmp	r3, #0
 800131a:	d108      	bne.n	800132e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800131c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	431a      	orrs	r2, r3
 800132a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7e5b      	ldrb	r3, [r3, #25]
 8001332:	035b      	lsls	r3, r3, #13
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001338:	2a01      	cmp	r2, #1
 800133a:	d002      	beq.n	8001342 <HAL_ADC_Init+0x1e6>
 800133c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001340:	e000      	b.n	8001344 <HAL_ADC_Init+0x1e8>
 8001342:	2200      	movs	r2, #0
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4313      	orrs	r3, r2
 8001352:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001354:	4313      	orrs	r3, r2
 8001356:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d11b      	bne.n	800139a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e5b      	ldrb	r3, [r3, #25]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	3b01      	subs	r3, #1
 8001370:	045a      	lsls	r2, r3, #17
 8001372:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001374:	4313      	orrs	r3, r2
 8001376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137a:	663b      	str	r3, [r7, #96]	; 0x60
 800137c:	e00d      	b.n	800139a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001386:	f043 0220 	orr.w	r2, r3, #32
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f043 0201 	orr.w	r2, r3, #1
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d007      	beq.n	80013b2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013aa:	4313      	orrs	r3, r2
 80013ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013ae:	4313      	orrs	r3, r2
 80013b0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d114      	bne.n	80013ea <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6812      	ldr	r2, [r2, #0]
 80013ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013ce:	f023 0302 	bic.w	r3, r3, #2
 80013d2:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7e1b      	ldrb	r3, [r3, #24]
 80013d8:	039a      	lsls	r2, r3, #14
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4313      	orrs	r3, r2
 80013e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80013e6:	4313      	orrs	r3, r2
 80013e8:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_ADC_Init+0x320>)
 80013f2:	4013      	ands	r3, r2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80013fa:	430b      	orrs	r3, r1
 80013fc:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10c      	bne.n	8001420 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	f023 010f 	bic.w	r1, r3, #15
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	430a      	orrs	r2, r1
 800141c:	631a      	str	r2, [r3, #48]	; 0x30
 800141e:	e007      	b.n	8001430 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 020f 	bic.w	r2, r2, #15
 800142e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
 8001446:	e00a      	b.n	800145e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f023 0312 	bic.w	r3, r3, #18
 8001450:	f043 0210 	orr.w	r2, r3, #16
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001458:	2301      	movs	r3, #1
 800145a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800145e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001462:	4618      	mov	r0, r3
 8001464:	3768      	adds	r7, #104	; 0x68
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83
 8001474:	50000300 	.word	0x50000300
 8001478:	50000100 	.word	0x50000100
 800147c:	fff0c007 	.word	0xfff0c007

08001480 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	2b00      	cmp	r3, #0
 8001498:	f040 809c 	bne.w	80015d4 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d101      	bne.n	80014aa <HAL_ADC_Start+0x2a>
 80014a6:	2302      	movs	r3, #2
 80014a8:	e097      	b.n	80015da <HAL_ADC_Start+0x15a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 fc9c 	bl	8001df0 <ADC_Enable>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f040 8083 	bne.w	80015ca <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014cc:	f023 0301 	bic.w	r3, r3, #1
 80014d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014d8:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <HAL_ADC_Start+0x164>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 031f 	and.w	r3, r3, #31
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d004      	beq.n	80014ee <HAL_ADC_Start+0x6e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014ec:	d115      	bne.n	800151a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d027      	beq.n	8001558 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001518:	e01e      	b.n	8001558 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800152e:	d004      	beq.n	800153a <HAL_ADC_Start+0xba>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a2c      	ldr	r2, [pc, #176]	; (80015e8 <HAL_ADC_Start+0x168>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d10e      	bne.n	8001558 <HAL_ADC_Start+0xd8>
 800153a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001550:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001564:	d106      	bne.n	8001574 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f023 0206 	bic.w	r2, r3, #6
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	645a      	str	r2, [r3, #68]	; 0x44
 8001572:	e002      	b.n	800157a <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	221c      	movs	r2, #28
 8001588:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800158a:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <HAL_ADC_Start+0x164>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	2b00      	cmp	r3, #0
 8001594:	d010      	beq.n	80015b8 <HAL_ADC_Start+0x138>
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <HAL_ADC_Start+0x164>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f003 031f 	and.w	r3, r3, #31
 800159e:	2b05      	cmp	r3, #5
 80015a0:	d00a      	beq.n	80015b8 <HAL_ADC_Start+0x138>
 80015a2:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HAL_ADC_Start+0x164>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 031f 	and.w	r3, r3, #31
 80015aa:	2b09      	cmp	r3, #9
 80015ac:	d004      	beq.n	80015b8 <HAL_ADC_Start+0x138>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b6:	d10f      	bne.n	80015d8 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0204 	orr.w	r2, r2, #4
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	e006      	b.n	80015d8 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80015d2:	e001      	b.n	80015d8 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80015d4:	2302      	movs	r3, #2
 80015d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	50000300 	.word	0x50000300
 80015e8:	50000100 	.word	0x50000100

080015ec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 80b9 	bne.w	800177e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001612:	2b01      	cmp	r3, #1
 8001614:	d101      	bne.n	800161a <HAL_ADC_Start_DMA+0x2e>
 8001616:	2302      	movs	r3, #2
 8001618:	e0b4      	b.n	8001784 <HAL_ADC_Start_DMA+0x198>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001622:	4b5a      	ldr	r3, [pc, #360]	; (800178c <HAL_ADC_Start_DMA+0x1a0>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 031f 	and.w	r3, r3, #31
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 80a0 	bne.w	8001770 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 fbdd 	bl	8001df0 <ADC_Enable>
 8001636:	4603      	mov	r3, r0
 8001638:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b00      	cmp	r3, #0
 800163e:	f040 8092 	bne.w	8001766 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001656:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_ADC_Start_DMA+0x1a0>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_ADC_Start_DMA+0x80>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800166a:	d115      	bne.n	8001698 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d027      	beq.n	80016d6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800168e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001696:	e01e      	b.n	80016d6 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016ac:	d004      	beq.n	80016b8 <HAL_ADC_Start_DMA+0xcc>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a37      	ldr	r2, [pc, #220]	; (8001790 <HAL_ADC_Start_DMA+0x1a4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d10e      	bne.n	80016d6 <HAL_ADC_Start_DMA+0xea>
 80016b8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e2:	d106      	bne.n	80016f2 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f023 0206 	bic.w	r2, r3, #6
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
 80016f0:	e002      	b.n	80016f8 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_ADC_Start_DMA+0x1a8>)
 8001706:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <HAL_ADC_Start_DMA+0x1ac>)
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	4a21      	ldr	r2, [pc, #132]	; (800179c <HAL_ADC_Start_DMA+0x1b0>)
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	221c      	movs	r2, #28
 800171e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0210 	orr.w	r2, r2, #16
 800172e:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68da      	ldr	r2, [r3, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3340      	adds	r3, #64	; 0x40
 800174a:	4619      	mov	r1, r3
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f000 fe5e 	bl	8002410 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0204 	orr.w	r2, r2, #4
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e00d      	b.n	8001782 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800176e:	e008      	b.n	8001782 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800177c:	e001      	b.n	8001782 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800177e:	2302      	movs	r3, #2
 8001780:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001782:	7dfb      	ldrb	r3, [r7, #23]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	50000300 	.word	0x50000300
 8001790:	50000100 	.word	0x50000100
 8001794:	08001d25 	.word	0x08001d25
 8001798:	08001d9f 	.word	0x08001d9f
 800179c:	08001dbb 	.word	0x08001dbb

080017a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b09b      	sub	sp, #108	; 0x6c
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x22>
 80017be:	2302      	movs	r3, #2
 80017c0:	e2a5      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x56e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f003 0304 	and.w	r3, r3, #4
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f040 8289 	bne.w	8001cec <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d81c      	bhi.n	800181c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	4413      	add	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	461a      	mov	r2, r3
 80017f6:	231f      	movs	r3, #31
 80017f8:	4093      	lsls	r3, r2
 80017fa:	43db      	mvns	r3, r3
 80017fc:	4019      	ands	r1, r3
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	6818      	ldr	r0, [r3, #0]
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4613      	mov	r3, r2
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	fa00 f203 	lsl.w	r2, r0, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	631a      	str	r2, [r3, #48]	; 0x30
 800181a:	e063      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b09      	cmp	r3, #9
 8001822:	d81e      	bhi.n	8001862 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	3b1e      	subs	r3, #30
 8001838:	221f      	movs	r2, #31
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	4019      	ands	r1, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	4413      	add	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	3b1e      	subs	r3, #30
 8001854:	fa00 f203 	lsl.w	r2, r0, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
 8001860:	e040      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b0e      	cmp	r3, #14
 8001868:	d81e      	bhi.n	80018a8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685a      	ldr	r2, [r3, #4]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	3b3c      	subs	r3, #60	; 0x3c
 800187e:	221f      	movs	r2, #31
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	4019      	ands	r1, r3
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4413      	add	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	3b3c      	subs	r3, #60	; 0x3c
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38
 80018a6:	e01d      	b.n	80018e4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	3b5a      	subs	r3, #90	; 0x5a
 80018bc:	221f      	movs	r2, #31
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4019      	ands	r1, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	3b5a      	subs	r3, #90	; 0x5a
 80018d8:	fa00 f203 	lsl.w	r2, r0, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80e5 	bne.w	8001abe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b09      	cmp	r3, #9
 80018fa:	d91c      	bls.n	8001936 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6999      	ldr	r1, [r3, #24]
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	3b1e      	subs	r3, #30
 800190e:	2207      	movs	r2, #7
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	4019      	ands	r1, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	6898      	ldr	r0, [r3, #8]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	3b1e      	subs	r3, #30
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	619a      	str	r2, [r3, #24]
 8001934:	e019      	b.n	800196a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6959      	ldr	r1, [r3, #20]
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	4413      	add	r3, r2
 8001946:	2207      	movs	r2, #7
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6898      	ldr	r0, [r3, #8]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	fa00 f203 	lsl.w	r2, r0, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	08db      	lsrs	r3, r3, #3
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	3b01      	subs	r3, #1
 8001988:	2b03      	cmp	r3, #3
 800198a:	d84f      	bhi.n	8001a2c <HAL_ADC_ConfigChannel+0x28c>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <HAL_ADC_ConfigChannel+0x1f4>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019a5 	.word	0x080019a5
 8001998:	080019c7 	.word	0x080019c7
 800199c:	080019e9 	.word	0x080019e9
 80019a0:	08001a0b 	.word	0x08001a0b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019aa:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_ADC_ConfigChannel+0x484>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	0691      	lsls	r1, r2, #26
 80019b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019b6:	430a      	orrs	r2, r1
 80019b8:	431a      	orrs	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019c2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019c4:	e07e      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80019cc:	4b95      	ldr	r3, [pc, #596]	; (8001c24 <HAL_ADC_ConfigChannel+0x484>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	0691      	lsls	r1, r2, #26
 80019d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019d8:	430a      	orrs	r2, r1
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80019e4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80019e6:	e06d      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80019ee:	4b8d      	ldr	r3, [pc, #564]	; (8001c24 <HAL_ADC_ConfigChannel+0x484>)
 80019f0:	4013      	ands	r3, r2
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	0691      	lsls	r1, r2, #26
 80019f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019fa:	430a      	orrs	r2, r1
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a06:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a08:	e05c      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001a10:	4b84      	ldr	r3, [pc, #528]	; (8001c24 <HAL_ADC_ConfigChannel+0x484>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	6812      	ldr	r2, [r2, #0]
 8001a18:	0691      	lsls	r1, r2, #26
 8001a1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a28:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001a2a:	e04b      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	069b      	lsls	r3, r3, #26
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a4e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	069b      	lsls	r3, r3, #26
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d107      	bne.n	8001a74 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a72:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	069b      	lsls	r3, r3, #26
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d107      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001a96:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001a9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	069b      	lsls	r3, r3, #26
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d10a      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001aba:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001abc:	e001      	b.n	8001ac2 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001abe:	bf00      	nop
 8001ac0:	e000      	b.n	8001ac4 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001ac2:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d108      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x344>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_ADC_ConfigChannel+0x344>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x346>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 810b 	bne.w	8001d02 <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d00f      	beq.n	8001b14 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001b12:	e049      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	409a      	lsls	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b09      	cmp	r3, #9
 8001b34:	d91c      	bls.n	8001b70 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6999      	ldr	r1, [r3, #24]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	3b1b      	subs	r3, #27
 8001b48:	2207      	movs	r2, #7
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	4019      	ands	r1, r3
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6898      	ldr	r0, [r3, #8]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	3b1b      	subs	r3, #27
 8001b62:	fa00 f203 	lsl.w	r2, r0, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	619a      	str	r2, [r3, #24]
 8001b6e:	e01b      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6959      	ldr	r1, [r3, #20]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	1c5a      	adds	r2, r3, #1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	2207      	movs	r2, #7
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	4019      	ands	r1, r3
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6898      	ldr	r0, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_ADC_ConfigChannel+0x488>)
 8001baa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d105      	bne.n	8001bc0 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d015      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001bc4:	2b11      	cmp	r3, #17
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00b      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	f040 8092 	bne.w	8001d02 <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001bde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f040 808b 	bne.w	8001d02 <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bf4:	d102      	bne.n	8001bfc <HAL_ADC_ConfigChannel+0x45c>
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_ADC_ConfigChannel+0x48c>)
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	e002      	b.n	8001c02 <HAL_ADC_ConfigChannel+0x462>
 8001bfc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c00:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d10f      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x490>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d108      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x490>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e007      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x492>
 8001c22:	bf00      	nop
 8001c24:	83fff000 	.word	0x83fff000
 8001c28:	50000300 	.word	0x50000300
 8001c2c:	50000100 	.word	0x50000100
 8001c30:	2300      	movs	r3, #0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d150      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d107      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x4b8>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x4b8>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x4ba>
 8001c58:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d13c      	bne.n	8001cd8 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b10      	cmp	r3, #16
 8001c64:	d11d      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x502>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6e:	d118      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c7a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_ADC_ConfigChannel+0x57c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a27      	ldr	r2, [pc, #156]	; (8001d20 <HAL_ADC_ConfigChannel+0x580>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0c9a      	lsrs	r2, r3, #18
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c92:	e002      	b.n	8001c9a <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1f9      	bne.n	8001c94 <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ca0:	e02e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2b11      	cmp	r3, #17
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x522>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb2:	d106      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001cbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cbe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cc0:	e01e      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d11a      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001cd4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001cd6:	e013      	b.n	8001d00 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f043 0220 	orr.w	r2, r3, #32
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cea:	e00a      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001cfe:	e000      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001d00:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	376c      	adds	r7, #108	; 0x6c
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83

08001d24 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d30:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d126      	bne.n	8001d8c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d115      	bne.n	8001d84 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d111      	bne.n	8001d84 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d105      	bne.n	8001d84 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	f043 0201 	orr.w	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7fe ff8f 	bl	8000ca8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001d8a:	e004      	b.n	8001d96 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff f9c1 	bl	8001134 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b084      	sub	sp, #16
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f043 0204 	orr.w	r2, r3, #4
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff f9b1 	bl	8001148 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001de6:	bf00      	nop
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
	...

08001df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d108      	bne.n	8001e1c <ADC_Enable+0x2c>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <ADC_Enable+0x2c>
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e000      	b.n	8001e1e <ADC_Enable+0x2e>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d13c      	bne.n	8001e9c <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <ADC_Enable+0xb8>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00d      	beq.n	8001e4c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f043 0210 	orr.w	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e40:	f043 0201 	orr.w	r2, r3, #1
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e028      	b.n	8001e9e <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001e5c:	f7ff f95e 	bl	800111c <HAL_GetTick>
 8001e60:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e62:	e014      	b.n	8001e8e <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e64:	f7ff f95a 	bl	800111c <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d90d      	bls.n	8001e8e <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f043 0210 	orr.w	r2, r3, #16
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f043 0201 	orr.w	r2, r3, #1
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e007      	b.n	8001e9e <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d1e3      	bne.n	8001e64 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	8000003f 	.word	0x8000003f

08001eac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <ADC_Disable+0x2c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d101      	bne.n	8001ed8 <ADC_Disable+0x2c>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <ADC_Disable+0x2e>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d040      	beq.n	8001f60 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030d 	and.w	r3, r3, #13
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d10f      	bne.n	8001f0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f042 0202 	orr.w	r2, r2, #2
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2203      	movs	r2, #3
 8001f02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001f04:	f7ff f90a 	bl	800111c <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f0a:	e022      	b.n	8001f52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	f043 0210 	orr.w	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	f043 0201 	orr.w	r2, r3, #1
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e01c      	b.n	8001f62 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f28:	f7ff f8f8 	bl	800111c <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d90d      	bls.n	8001f52 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e007      	b.n	8001f62 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d0e3      	beq.n	8001f28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b084      	sub	sp, #16
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0ed      	b.n	8002158 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7fe ffb9 	bl	8000f00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0202 	bic.w	r2, r2, #2
 8001f9c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f9e:	f7ff f8bd 	bl	800111c <HAL_GetTick>
 8001fa2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fa4:	e012      	b.n	8001fcc <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa6:	f7ff f8b9 	bl	800111c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b0a      	cmp	r3, #10
 8001fb2:	d90b      	bls.n	8001fcc <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2205      	movs	r2, #5
 8001fc4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c5      	b.n	8002158 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e5      	bne.n	8001fa6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fea:	f7ff f897 	bl	800111c <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ff0:	e012      	b.n	8002018 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ff2:	f7ff f893 	bl	800111c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	d90b      	bls.n	8002018 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2205      	movs	r2, #5
 8002010:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e09f      	b.n	8002158 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0e5      	beq.n	8001ff2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7e1b      	ldrb	r3, [r3, #24]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d108      	bne.n	8002040 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e007      	b.n	8002050 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800204e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	7e5b      	ldrb	r3, [r3, #25]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d108      	bne.n	800206a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e007      	b.n	800207a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7e9b      	ldrb	r3, [r3, #26]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d108      	bne.n	8002094 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0220 	orr.w	r2, r2, #32
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	e007      	b.n	80020a4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0220 	bic.w	r2, r2, #32
 80020a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	7edb      	ldrb	r3, [r3, #27]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d108      	bne.n	80020be <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0210 	bic.w	r2, r2, #16
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e007      	b.n	80020ce <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0210 	orr.w	r2, r2, #16
 80020cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7f1b      	ldrb	r3, [r3, #28]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d108      	bne.n	80020e8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0208 	orr.w	r2, r2, #8
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e007      	b.n	80020f8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0208 	bic.w	r2, r2, #8
 80020f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7f5b      	ldrb	r3, [r3, #29]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d108      	bne.n	8002112 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0204 	orr.w	r2, r2, #4
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e007      	b.n	8002122 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0204 	bic.w	r2, r2, #4
 8002120:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	ea42 0103 	orr.w	r1, r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	1e5a      	subs	r2, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	430a      	orrs	r2, r1
 8002146:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	; (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0b      	blt.n	80021ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <__NVIC_EnableIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff29 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff3e 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff8e 	bl	8002254 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5d 	bl	8002200 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff31 	bl	80021c4 <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b084      	sub	sp, #16
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d101      	bne.n	8002398 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e037      	b.n	8002408 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	4313      	orrs	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f940 	bl	8002670 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}  
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
 800241c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_DMA_Start_IT+0x20>
 800242c:	2302      	movs	r3, #2
 800242e:	e04a      	b.n	80024c6 <HAL_DMA_Start_IT+0xb6>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800243e:	2b01      	cmp	r3, #1
 8002440:	d13a      	bne.n	80024b8 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2202      	movs	r2, #2
 8002446:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 f8d4 	bl	8002614 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 020e 	orr.w	r2, r2, #14
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	e00f      	b.n	80024a6 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 020a 	orr.w	r2, r2, #10
 8002494:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0204 	bic.w	r2, r2, #4
 80024a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e005      	b.n	80024c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80024c0:	2302      	movs	r3, #2
 80024c2:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
} 
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2204      	movs	r2, #4
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d024      	beq.n	8002540 <HAL_DMA_IRQHandler+0x72>
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01f      	beq.n	8002540 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0320 	and.w	r3, r3, #32
 800250a:	2b00      	cmp	r3, #0
 800250c:	d107      	bne.n	800251e <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0204 	bic.w	r2, r2, #4
 800251c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	2104      	movs	r1, #4
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d06a      	beq.n	800260c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800253e:	e065      	b.n	800260c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	2202      	movs	r2, #2
 8002546:	409a      	lsls	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4013      	ands	r3, r2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d02c      	beq.n	80025aa <HAL_DMA_IRQHandler+0xdc>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d027      	beq.n	80025aa <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0320 	and.w	r3, r3, #32
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10b      	bne.n	8002580 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020a 	bic.w	r2, r2, #10
 8002576:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002588:	2102      	movs	r1, #2
 800258a:	fa01 f202 	lsl.w	r2, r1, r2
 800258e:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d035      	beq.n	800260c <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80025a8:	e030      	b.n	800260c <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	2208      	movs	r2, #8
 80025b0:	409a      	lsls	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d028      	beq.n	800260c <HAL_DMA_IRQHandler+0x13e>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f003 0308 	and.w	r3, r3, #8
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d023      	beq.n	800260c <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 020e 	bic.w	r2, r2, #14
 80025d2:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025dc:	2101      	movs	r1, #1
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
    }
  }
}  
 800260a:	e7ff      	b.n	800260c <HAL_DMA_IRQHandler+0x13e>
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
 8002620:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	2101      	movs	r1, #1
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b10      	cmp	r3, #16
 8002640:	d108      	bne.n	8002654 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002652:	e007      	b.n	8002664 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <DMA_CalcBaseAndBitshift+0x34>)
 8002680:	4413      	add	r3, r2
 8002682:	4a09      	ldr	r2, [pc, #36]	; (80026a8 <DMA_CalcBaseAndBitshift+0x38>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	009a      	lsls	r2, r3, #2
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a06      	ldr	r2, [pc, #24]	; (80026ac <DMA_CalcBaseAndBitshift+0x3c>)
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	bffdfff8 	.word	0xbffdfff8
 80026a8:	cccccccd 	.word	0xcccccccd
 80026ac:	40020000 	.word	0x40020000

080026b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026be:	e14e      	b.n	800295e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	4013      	ands	r3, r2
 80026ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8140 	beq.w	8002958 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d00b      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026ec:	2b11      	cmp	r3, #17
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b12      	cmp	r3, #18
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	4013      	ands	r3, r2
 8002770:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0xea>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b12      	cmp	r3, #18
 8002798:	d123      	bne.n	80027e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	08da      	lsrs	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3208      	adds	r2, #8
 80027dc:	6939      	ldr	r1, [r7, #16]
 80027de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0203 	and.w	r2, r3, #3
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	4313      	orrs	r3, r2
 800280e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 809a 	beq.w	8002958 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002824:	4b55      	ldr	r3, [pc, #340]	; (800297c <HAL_GPIO_Init+0x2cc>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_GPIO_Init+0x2cc>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b52      	ldr	r3, [pc, #328]	; (800297c <HAL_GPIO_Init+0x2cc>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800283c:	4a50      	ldr	r2, [pc, #320]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	089b      	lsrs	r3, r3, #2
 8002842:	3302      	adds	r3, #2
 8002844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002848:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	220f      	movs	r2, #15
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002866:	d013      	beq.n	8002890 <HAL_GPIO_Init+0x1e0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a46      	ldr	r2, [pc, #280]	; (8002984 <HAL_GPIO_Init+0x2d4>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d00d      	beq.n	800288c <HAL_GPIO_Init+0x1dc>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a45      	ldr	r2, [pc, #276]	; (8002988 <HAL_GPIO_Init+0x2d8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d007      	beq.n	8002888 <HAL_GPIO_Init+0x1d8>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a44      	ldr	r2, [pc, #272]	; (800298c <HAL_GPIO_Init+0x2dc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_GPIO_Init+0x1d4>
 8002880:	2303      	movs	r3, #3
 8002882:	e006      	b.n	8002892 <HAL_GPIO_Init+0x1e2>
 8002884:	2305      	movs	r3, #5
 8002886:	e004      	b.n	8002892 <HAL_GPIO_Init+0x1e2>
 8002888:	2302      	movs	r3, #2
 800288a:	e002      	b.n	8002892 <HAL_GPIO_Init+0x1e2>
 800288c:	2301      	movs	r3, #1
 800288e:	e000      	b.n	8002892 <HAL_GPIO_Init+0x1e2>
 8002890:	2300      	movs	r3, #0
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	f002 0203 	and.w	r2, r2, #3
 8002898:	0092      	lsls	r2, r2, #2
 800289a:	4093      	lsls	r3, r2
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a2:	4937      	ldr	r1, [pc, #220]	; (8002980 <HAL_GPIO_Init+0x2d0>)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028d4:	4a2e      	ldr	r2, [pc, #184]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028da:	4b2d      	ldr	r3, [pc, #180]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028fe:	4a24      	ldr	r2, [pc, #144]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4313      	orrs	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002928:	4a19      	ldr	r2, [pc, #100]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	43db      	mvns	r3, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4013      	ands	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002952:	4a0f      	ldr	r2, [pc, #60]	; (8002990 <HAL_GPIO_Init+0x2e0>)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	3301      	adds	r3, #1
 800295c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	f47f aea9 	bne.w	80026c0 <HAL_GPIO_Init+0x10>
  }
}
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	371c      	adds	r7, #28
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40021000 	.word	0x40021000
 8002980:	40010000 	.word	0x40010000
 8002984:	48000400 	.word	0x48000400
 8002988:	48000800 	.word	0x48000800
 800298c:	48000c00 	.word	0x48000c00
 8002990:	40010400 	.word	0x40010400

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029b0:	e002      	b.n	80029b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029b2:	887a      	ldrh	r2, [r7, #2]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d102      	bne.n	80029de <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f000 bef4 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029de:	1d3b      	adds	r3, r7, #4
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 816a 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80029ee:	4bb3      	ldr	r3, [pc, #716]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d00c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029fa:	4bb0      	ldr	r3, [pc, #704]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d159      	bne.n	8002aba <HAL_RCC_OscConfig+0xf6>
 8002a06:	4bad      	ldr	r3, [pc, #692]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d152      	bne.n	8002aba <HAL_RCC_OscConfig+0xf6>
 8002a14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	fab3 f383 	clz	r3, r3
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d102      	bne.n	8002a46 <HAL_RCC_OscConfig+0x82>
 8002a40:	4b9e      	ldr	r3, [pc, #632]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0xae>
 8002a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002a5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002a62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002a6e:	4b93      	ldr	r3, [pc, #588]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002a7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002a7e:	fa92 f2a2 	rbit	r2, r2
 8002a82:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002a86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002a8a:	fab2 f282 	clz	r2, r2
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	f042 0220 	orr.w	r2, r2, #32
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	f002 021f 	and.w	r2, r2, #31
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 810c 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x2fc>
 8002aa8:	1d3b      	adds	r3, r7, #4
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8106 	bne.w	8002cc0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f000 be86 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ac4:	d106      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x110>
 8002ac6:	4b7d      	ldr	r3, [pc, #500]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7c      	ldr	r2, [pc, #496]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e030      	b.n	8002b36 <HAL_RCC_OscConfig+0x172>
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x134>
 8002ade:	4b77      	ldr	r3, [pc, #476]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a76      	ldr	r2, [pc, #472]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b74      	ldr	r3, [pc, #464]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a73      	ldr	r2, [pc, #460]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e01e      	b.n	8002b36 <HAL_RCC_OscConfig+0x172>
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b02:	d10c      	bne.n	8002b1e <HAL_RCC_OscConfig+0x15a>
 8002b04:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6c      	ldr	r2, [pc, #432]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a69      	ldr	r2, [pc, #420]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	e00b      	b.n	8002b36 <HAL_RCC_OscConfig+0x172>
 8002b1e:	4b67      	ldr	r3, [pc, #412]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a66      	ldr	r2, [pc, #408]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a63      	ldr	r2, [pc, #396]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	1d3b      	adds	r3, r7, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	495d      	ldr	r1, [pc, #372]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d059      	beq.n	8002c08 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7fe fae2 	bl	800111c <HAL_GetTick>
 8002b58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5e:	f7fe fadd 	bl	800111c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	; 0x64
 8002b6c:	d902      	bls.n	8002b74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	f000 be29 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>
 8002b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002b88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x1e2>
 8002ba0:	4b46      	ldr	r3, [pc, #280]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x20e>
 8002ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002baa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002bb2:	fa93 f3a3 	rbit	r3, r3
 8002bb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002bc2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002bce:	4b3b      	ldr	r3, [pc, #236]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bd6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002bda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002bde:	fa92 f2a2 	rbit	r2, r2
 8002be2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002be6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	f002 021f 	and.w	r2, r2, #31
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002c00:	4013      	ands	r3, r2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0ab      	beq.n	8002b5e <HAL_RCC_OscConfig+0x19a>
 8002c06:	e05c      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fa88 	bl	800111c <HAL_GetTick>
 8002c0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c10:	e00a      	b.n	8002c28 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c12:	f7fe fa83 	bl	800111c <HAL_GetTick>
 8002c16:	4602      	mov	r2, r0
 8002c18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d902      	bls.n	8002c28 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	f000 bdcf 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>
 8002c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002c34:	fa93 f3a3 	rbit	r3, r3
 8002c38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002c3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f043 0301 	orr.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d102      	bne.n	8002c5a <HAL_RCC_OscConfig+0x296>
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	e015      	b.n	8002c86 <HAL_RCC_OscConfig+0x2c2>
 8002c5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002c76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002c82:	4b0e      	ldr	r3, [pc, #56]	; (8002cbc <HAL_RCC_OscConfig+0x2f8>)
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002c8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002c92:	fa92 f2a2 	rbit	r2, r2
 8002c96:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002c9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002c9e:	fab2 f282 	clz	r2, r2
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	f002 021f 	and.w	r2, r2, #31
 8002cae:	2101      	movs	r1, #1
 8002cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ab      	bne.n	8002c12 <HAL_RCC_OscConfig+0x24e>
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_OscConfig+0x2fe>
 8002cbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 816f 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002cd2:	4bd0      	ldr	r3, [pc, #832]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002cde:	4bcd      	ldr	r3, [pc, #820]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b08      	cmp	r3, #8
 8002ce8:	d16c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x400>
 8002cea:	4bca      	ldr	r3, [pc, #808]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d166      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x400>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002d08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	095b      	lsrs	r3, r3, #5
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d102      	bne.n	8002d26 <HAL_RCC_OscConfig+0x362>
 8002d20:	4bbc      	ldr	r3, [pc, #752]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	e013      	b.n	8002d4e <HAL_RCC_OscConfig+0x38a>
 8002d26:	2302      	movs	r3, #2
 8002d28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002d38:	2302      	movs	r3, #2
 8002d3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002d3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002d4a:	4bb2      	ldr	r3, [pc, #712]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002d54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d58:	fa92 f2a2 	rbit	r2, r2
 8002d5c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002d60:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002d64:	fab2 f282 	clz	r2, r2
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	f042 0220 	orr.w	r2, r2, #32
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	f002 021f 	and.w	r2, r2, #31
 8002d74:	2101      	movs	r1, #1
 8002d76:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3cc>
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d002      	beq.n	8002d90 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f000 bd1b 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4ba0      	ldr	r3, [pc, #640]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d98:	1d3b      	adds	r3, r7, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	21f8      	movs	r1, #248	; 0xf8
 8002da0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002da8:	fa91 f1a1 	rbit	r1, r1
 8002dac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002db0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002db4:	fab1 f181 	clz	r1, r1
 8002db8:	b2c9      	uxtb	r1, r1
 8002dba:	408b      	lsls	r3, r1
 8002dbc:	4995      	ldr	r1, [pc, #596]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e0f5      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 8085 	beq.w	8002eda <HAL_RCC_OscConfig+0x516>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002de2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de6:	fab3 f383 	clz	r3, r3
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002df0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	461a      	mov	r2, r3
 8002df8:	2301      	movs	r3, #1
 8002dfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dfc:	f7fe f98e 	bl	800111c <HAL_GetTick>
 8002e00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	e00a      	b.n	8002e1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fe f989 	bl	800111c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d902      	bls.n	8002e1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	f000 bcd5 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002e2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0x488>
 8002e46:	4b73      	ldr	r3, [pc, #460]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e013      	b.n	8002e74 <HAL_RCC_OscConfig+0x4b0>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002e5e:	2302      	movs	r3, #2
 8002e60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002e64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2202      	movs	r2, #2
 8002e76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002e7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002e7e:	fa92 f2a2 	rbit	r2, r2
 8002e82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002e86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002e8a:	fab2 f282 	clz	r2, r2
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	f042 0220 	orr.w	r2, r2, #32
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	f002 021f 	and.w	r2, r2, #31
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0af      	beq.n	8002e06 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	21f8      	movs	r1, #248	; 0xf8
 8002eb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002ebe:	fa91 f1a1 	rbit	r1, r1
 8002ec2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ec6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002eca:	fab1 f181 	clz	r1, r1
 8002ece:	b2c9      	uxtb	r1, r1
 8002ed0:	408b      	lsls	r3, r1
 8002ed2:	4950      	ldr	r1, [pc, #320]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	600b      	str	r3, [r1, #0]
 8002ed8:	e06a      	b.n	8002fb0 <HAL_RCC_OscConfig+0x5ec>
 8002eda:	2301      	movs	r3, #1
 8002edc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002eec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002efa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	461a      	mov	r2, r3
 8002f02:	2300      	movs	r3, #0
 8002f04:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fe f909 	bl	800111c <HAL_GetTick>
 8002f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f0e:	e00a      	b.n	8002f26 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f10:	f7fe f904 	bl	800111c <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d902      	bls.n	8002f26 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	f000 bc50 	b.w	80037c6 <HAL_RCC_OscConfig+0xe02>
 8002f26:	2302      	movs	r3, #2
 8002f28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002f30:	fa93 f3a3 	rbit	r3, r3
 8002f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d102      	bne.n	8002f56 <HAL_RCC_OscConfig+0x592>
 8002f50:	4b30      	ldr	r3, [pc, #192]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	e013      	b.n	8002f7e <HAL_RCC_OscConfig+0x5ba>
 8002f56:	2302      	movs	r3, #2
 8002f58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002f68:	2302      	movs	r3, #2
 8002f6a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f7a:	4b26      	ldr	r3, [pc, #152]	; (8003014 <HAL_RCC_OscConfig+0x650>)
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002f84:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002f88:	fa92 f2a2 	rbit	r2, r2
 8002f8c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002f90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002f94:	fab2 f282 	clz	r2, r2
 8002f98:	b2d2      	uxtb	r2, r2
 8002f9a:	f042 0220 	orr.w	r2, r2, #32
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	f002 021f 	and.w	r2, r2, #31
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1af      	bne.n	8002f10 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fb0:	1d3b      	adds	r3, r7, #4
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0308 	and.w	r3, r3, #8
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80da 	beq.w	8003174 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc0:	1d3b      	adds	r3, r7, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d069      	beq.n	800309e <HAL_RCC_OscConfig+0x6da>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002fdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_OscConfig+0x654>)
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe f892 	bl	800111c <HAL_GetTick>
 8002ff8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ffc:	e00e      	b.n	800301c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fe f88d 	bl	800111c <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d906      	bls.n	800301c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e3d9      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	10908120 	.word	0x10908120
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800302e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003032:	2202      	movs	r2, #2
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	fa93 f2a3 	rbit	r2, r3
 8003040:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800304a:	2202      	movs	r2, #2
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	fa93 f2a3 	rbit	r2, r3
 8003058:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800305c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305e:	4ba5      	ldr	r3, [pc, #660]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003062:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003066:	2102      	movs	r1, #2
 8003068:	6019      	str	r1, [r3, #0]
 800306a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f1a3 	rbit	r1, r3
 8003074:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003078:	6019      	str	r1, [r3, #0]
  return result;
 800307a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	fab3 f383 	clz	r3, r3
 8003084:	b2db      	uxtb	r3, r3
 8003086:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0b0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x63a>
 800309c:	e06a      	b.n	8003174 <HAL_RCC_OscConfig+0x7b0>
 800309e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030a2:	2201      	movs	r2, #1
 80030a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	fa93 f2a3 	rbit	r2, r3
 80030b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030b4:	601a      	str	r2, [r3, #0]
  return result;
 80030b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80030ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030bc:	fab3 f383 	clz	r3, r3
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <HAL_RCC_OscConfig+0x934>)
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	461a      	mov	r2, r3
 80030cc:	2300      	movs	r3, #0
 80030ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d0:	f7fe f824 	bl	800111c <HAL_GetTick>
 80030d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e009      	b.n	80030ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030da:	f7fe f81f 	bl	800111c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e36b      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 80030ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030f2:	2202      	movs	r2, #2
 80030f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	fa93 f2a3 	rbit	r2, r3
 8003100:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800310a:	2202      	movs	r2, #2
 800310c:	601a      	str	r2, [r3, #0]
 800310e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	fa93 f2a3 	rbit	r2, r3
 8003118:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003122:	2202      	movs	r2, #2
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	fa93 f2a3 	rbit	r2, r3
 8003130:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003134:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003136:	4b6f      	ldr	r3, [pc, #444]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800313e:	2102      	movs	r1, #2
 8003140:	6019      	str	r1, [r3, #0]
 8003142:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	fa93 f1a3 	rbit	r1, r3
 800314c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003150:	6019      	str	r1, [r3, #0]
  return result;
 8003152:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003162:	b2db      	uxtb	r3, r3
 8003164:	f003 031f 	and.w	r3, r3, #31
 8003168:	2101      	movs	r1, #1
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	4013      	ands	r3, r2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1b2      	bne.n	80030da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003174:	1d3b      	adds	r3, r7, #4
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8158 	beq.w	8003434 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800318a:	4b5a      	ldr	r3, [pc, #360]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003196:	4b57      	ldr	r3, [pc, #348]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	4a56      	ldr	r2, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800319c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a0:	61d3      	str	r3, [r2, #28]
 80031a2:	4b54      	ldr	r3, [pc, #336]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80031aa:	f107 0308 	add.w	r3, r7, #8
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f107 0308 	add.w	r3, r7, #8
 80031b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b4f      	ldr	r3, [pc, #316]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d11a      	bne.n	80031fe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 80031ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d4:	f7fd ffa2 	bl	800111c <HAL_GetTick>
 80031d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e009      	b.n	80031f2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd ff9d 	bl	800111c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b64      	cmp	r3, #100	; 0x64
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e2e9      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <HAL_RCC_OscConfig+0x938>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0ef      	beq.n	80031de <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fe:	1d3b      	adds	r3, r7, #4
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d106      	bne.n	8003216 <HAL_RCC_OscConfig+0x852>
 8003208:	4b3a      	ldr	r3, [pc, #232]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4a39      	ldr	r2, [pc, #228]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	6213      	str	r3, [r2, #32]
 8003214:	e02f      	b.n	8003276 <HAL_RCC_OscConfig+0x8b2>
 8003216:	1d3b      	adds	r3, r7, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10c      	bne.n	800323a <HAL_RCC_OscConfig+0x876>
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	4a33      	ldr	r2, [pc, #204]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6213      	str	r3, [r2, #32]
 800322c:	4b31      	ldr	r3, [pc, #196]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	4a30      	ldr	r2, [pc, #192]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6213      	str	r3, [r2, #32]
 8003238:	e01d      	b.n	8003276 <HAL_RCC_OscConfig+0x8b2>
 800323a:	1d3b      	adds	r3, r7, #4
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d10c      	bne.n	800325e <HAL_RCC_OscConfig+0x89a>
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	4b28      	ldr	r3, [pc, #160]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	6213      	str	r3, [r2, #32]
 800325c:	e00b      	b.n	8003276 <HAL_RCC_OscConfig+0x8b2>
 800325e:	4b25      	ldr	r3, [pc, #148]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a24      	ldr	r2, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	6213      	str	r3, [r2, #32]
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 8003270:	f023 0304 	bic.w	r3, r3, #4
 8003274:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003276:	1d3b      	adds	r3, r7, #4
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d06b      	beq.n	8003358 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fd ff4c 	bl	800111c <HAL_GetTick>
 8003284:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003288:	e00b      	b.n	80032a2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7fd ff47 	bl	800111c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e291      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 80032a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032a6:	2202      	movs	r2, #2
 80032a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	fa93 f2a3 	rbit	r2, r3
 80032b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032be:	2202      	movs	r2, #2
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	fa93 f2a3 	rbit	r2, r3
 80032cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032d0:	601a      	str	r2, [r3, #0]
  return result;
 80032d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80032d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	fab3 f383 	clz	r3, r3
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d109      	bne.n	8003300 <HAL_RCC_OscConfig+0x93c>
 80032ec:	4b01      	ldr	r3, [pc, #4]	; (80032f4 <HAL_RCC_OscConfig+0x930>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	e014      	b.n	800331c <HAL_RCC_OscConfig+0x958>
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	10908120 	.word	0x10908120
 80032fc:	40007000 	.word	0x40007000
 8003300:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003308:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	fa93 f2a3 	rbit	r2, r3
 8003312:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	4bbb      	ldr	r3, [pc, #748]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003320:	2102      	movs	r1, #2
 8003322:	6011      	str	r1, [r2, #0]
 8003324:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	fa92 f1a2 	rbit	r1, r2
 800332e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003332:	6011      	str	r1, [r2, #0]
  return result;
 8003334:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	fab2 f282 	clz	r2, r2
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	f002 021f 	and.w	r2, r2, #31
 800334a:	2101      	movs	r1, #1
 800334c:	fa01 f202 	lsl.w	r2, r1, r2
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d099      	beq.n	800328a <HAL_RCC_OscConfig+0x8c6>
 8003356:	e063      	b.n	8003420 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003358:	f7fd fee0 	bl	800111c <HAL_GetTick>
 800335c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003360:	e00b      	b.n	800337a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003362:	f7fd fedb 	bl	800111c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003372:	4293      	cmp	r3, r2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e225      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 800337a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800337e:	2202      	movs	r2, #2
 8003380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	fa93 f2a3 	rbit	r2, r3
 800338c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003396:	2202      	movs	r2, #2
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	fa93 f2a3 	rbit	r2, r3
 80033a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033a8:	601a      	str	r2, [r3, #0]
  return result;
 80033aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80033ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	f043 0302 	orr.w	r3, r3, #2
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d102      	bne.n	80033ca <HAL_RCC_OscConfig+0xa06>
 80033c4:	4b90      	ldr	r3, [pc, #576]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	e00d      	b.n	80033e6 <HAL_RCC_OscConfig+0xa22>
 80033ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033ce:	2202      	movs	r2, #2
 80033d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	fa93 f2a3 	rbit	r2, r3
 80033dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	4b89      	ldr	r3, [pc, #548]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033ea:	2102      	movs	r1, #2
 80033ec:	6011      	str	r1, [r2, #0]
 80033ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80033f2:	6812      	ldr	r2, [r2, #0]
 80033f4:	fa92 f1a2 	rbit	r1, r2
 80033f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80033fc:	6011      	str	r1, [r2, #0]
  return result;
 80033fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	fab2 f282 	clz	r2, r2
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	f002 021f 	and.w	r2, r2, #31
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f202 	lsl.w	r2, r1, r2
 800341a:	4013      	ands	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1a0      	bne.n	8003362 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003420:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003424:	2b01      	cmp	r3, #1
 8003426:	d105      	bne.n	8003434 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003428:	4b77      	ldr	r3, [pc, #476]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	4a76      	ldr	r2, [pc, #472]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 800342e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003432:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 81c2 	beq.w	80037c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003440:	4b71      	ldr	r3, [pc, #452]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f003 030c 	and.w	r3, r3, #12
 8003448:	2b08      	cmp	r3, #8
 800344a:	f000 819c 	beq.w	8003786 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	2b02      	cmp	r3, #2
 8003456:	f040 8114 	bne.w	8003682 <HAL_RCC_OscConfig+0xcbe>
 800345a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800345e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003464:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	fa93 f2a3 	rbit	r2, r3
 800346e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003472:	601a      	str	r2, [r3, #0]
  return result;
 8003474:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003478:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347a:	fab3 f383 	clz	r3, r3
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003484:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	461a      	mov	r2, r3
 800348c:	2300      	movs	r3, #0
 800348e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7fd fe44 	bl	800111c <HAL_GetTick>
 8003494:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003498:	e009      	b.n	80034ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800349a:	f7fd fe3f 	bl	800111c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e18b      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 80034ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	fa93 f2a3 	rbit	r2, r3
 80034c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034c6:	601a      	str	r2, [r3, #0]
  return result;
 80034c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80034cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	fab3 f383 	clz	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	095b      	lsrs	r3, r3, #5
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d102      	bne.n	80034e8 <HAL_RCC_OscConfig+0xb24>
 80034e2:	4b49      	ldr	r3, [pc, #292]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	e01b      	b.n	8003520 <HAL_RCC_OscConfig+0xb5c>
 80034e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003506:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	fa93 f2a3 	rbit	r2, r3
 8003516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	4b3a      	ldr	r3, [pc, #232]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003524:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003528:	6011      	str	r1, [r2, #0]
 800352a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	fa92 f1a2 	rbit	r1, r2
 8003534:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003538:	6011      	str	r1, [r2, #0]
  return result;
 800353a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fab2 f282 	clz	r2, r2
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	f042 0220 	orr.w	r2, r2, #32
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f002 021f 	and.w	r2, r2, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f202 	lsl.w	r2, r1, r2
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d19e      	bne.n	800349a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003564:	1d3b      	adds	r3, r7, #4
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	430b      	orrs	r3, r1
 8003572:	4925      	ldr	r1, [pc, #148]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 8003574:	4313      	orrs	r3, r2
 8003576:	604b      	str	r3, [r1, #4]
 8003578:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800357c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	fa93 f2a3 	rbit	r2, r3
 800358c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003590:	601a      	str	r2, [r3, #0]
  return result;
 8003592:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003596:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	fab3 f383 	clz	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80035a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	461a      	mov	r2, r3
 80035aa:	2301      	movs	r3, #1
 80035ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fdb5 	bl	800111c <HAL_GetTick>
 80035b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035b6:	e009      	b.n	80035cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035b8:	f7fd fdb0 	bl	800111c <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e0fc      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 80035cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	fa93 f2a3 	rbit	r2, r3
 80035e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035e4:	601a      	str	r2, [r3, #0]
  return result;
 80035e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80035ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035ec:	fab3 f383 	clz	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	f043 0301 	orr.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d105      	bne.n	800360c <HAL_RCC_OscConfig+0xc48>
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <HAL_RCC_OscConfig+0xc44>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	e01e      	b.n	8003644 <HAL_RCC_OscConfig+0xc80>
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	fa93 f2a3 	rbit	r2, r3
 8003620:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003624:	601a      	str	r2, [r3, #0]
 8003626:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800362a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	fa93 f2a3 	rbit	r2, r3
 800363a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	4b63      	ldr	r3, [pc, #396]	; (80037d0 <HAL_RCC_OscConfig+0xe0c>)
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003648:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800364c:	6011      	str	r1, [r2, #0]
 800364e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	fa92 f1a2 	rbit	r1, r2
 8003658:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800365c:	6011      	str	r1, [r2, #0]
  return result;
 800365e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	fab2 f282 	clz	r2, r2
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	f042 0220 	orr.w	r2, r2, #32
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	f002 021f 	and.w	r2, r2, #31
 8003674:	2101      	movs	r1, #1
 8003676:	fa01 f202 	lsl.w	r2, r1, r2
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d09b      	beq.n	80035b8 <HAL_RCC_OscConfig+0xbf4>
 8003680:	e0a0      	b.n	80037c4 <HAL_RCC_OscConfig+0xe00>
 8003682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003686:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800368a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	fa93 f2a3 	rbit	r2, r3
 8003696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800369a:	601a      	str	r2, [r3, #0]
  return result;
 800369c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a2:	fab3 f383 	clz	r3, r3
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80036ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	461a      	mov	r2, r3
 80036b4:	2300      	movs	r3, #0
 80036b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fd30 	bl	800111c <HAL_GetTick>
 80036bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036c0:	e009      	b.n	80036d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c2:	f7fd fd2b 	bl	800111c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e077      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
 80036d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	fa93 f2a3 	rbit	r2, r3
 80036ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036ee:	601a      	str	r2, [r3, #0]
  return result;
 80036f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f6:	fab3 f383 	clz	r3, r3
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b01      	cmp	r3, #1
 8003708:	d102      	bne.n	8003710 <HAL_RCC_OscConfig+0xd4c>
 800370a:	4b31      	ldr	r3, [pc, #196]	; (80037d0 <HAL_RCC_OscConfig+0xe0c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0xd84>
 8003710:	f107 0320 	add.w	r3, r7, #32
 8003714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371a:	f107 0320 	add.w	r3, r7, #32
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f107 031c 	add.w	r3, r7, #28
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	f107 0318 	add.w	r3, r7, #24
 800372e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	f107 0318 	add.w	r3, r7, #24
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	fa93 f2a3 	rbit	r2, r3
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	4b22      	ldr	r3, [pc, #136]	; (80037d0 <HAL_RCC_OscConfig+0xe0c>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f107 0210 	add.w	r2, r7, #16
 800374c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	f107 0210 	add.w	r2, r7, #16
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	fa92 f1a2 	rbit	r1, r2
 800375c:	f107 020c 	add.w	r2, r7, #12
 8003760:	6011      	str	r1, [r2, #0]
  return result;
 8003762:	f107 020c 	add.w	r2, r7, #12
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	fab2 f282 	clz	r2, r2
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	f042 0220 	orr.w	r2, r2, #32
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	f002 021f 	and.w	r2, r2, #31
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f202 	lsl.w	r2, r1, r2
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d19e      	bne.n	80036c2 <HAL_RCC_OscConfig+0xcfe>
 8003784:	e01e      	b.n	80037c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e018      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003794:	4b0e      	ldr	r3, [pc, #56]	; (80037d0 <HAL_RCC_OscConfig+0xe0c>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800379c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d108      	bne.n	80037c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037b6:	1d3b      	adds	r3, r7, #4
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b09e      	sub	sp, #120	; 0x78
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e162      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	4b90      	ldr	r3, [pc, #576]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d910      	bls.n	800381c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	4b8d      	ldr	r3, [pc, #564]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 0207 	bic.w	r2, r3, #7
 8003802:	498b      	ldr	r1, [pc, #556]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800380a:	4b89      	ldr	r3, [pc, #548]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d001      	beq.n	800381c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e14a      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d008      	beq.n	800383a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003828:	4b82      	ldr	r3, [pc, #520]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	497f      	ldr	r1, [pc, #508]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003836:	4313      	orrs	r3, r2
 8003838:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 80dc 	beq.w	8003a00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d13c      	bne.n	80038ca <HAL_RCC_ClockConfig+0xf6>
 8003850:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003854:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003860:	fab3 f383 	clz	r3, r3
 8003864:	b2db      	uxtb	r3, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	b2db      	uxtb	r3, r3
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d102      	bne.n	800387a <HAL_RCC_ClockConfig+0xa6>
 8003874:	4b6f      	ldr	r3, [pc, #444]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	e00f      	b.n	800389a <HAL_RCC_ClockConfig+0xc6>
 800387a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800387e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003882:	fa93 f3a3 	rbit	r3, r3
 8003886:	667b      	str	r3, [r7, #100]	; 0x64
 8003888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800388c:	663b      	str	r3, [r7, #96]	; 0x60
 800388e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003890:	fa93 f3a3 	rbit	r3, r3
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003896:	4b67      	ldr	r3, [pc, #412]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800389e:	65ba      	str	r2, [r7, #88]	; 0x58
 80038a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038a2:	fa92 f2a2 	rbit	r2, r2
 80038a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038aa:	fab2 f282 	clz	r2, r2
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	f042 0220 	orr.w	r2, r2, #32
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	f002 021f 	and.w	r2, r2, #31
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d17b      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0f3      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d13c      	bne.n	800394c <HAL_RCC_ClockConfig+0x178>
 80038d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038da:	fa93 f3a3 	rbit	r3, r3
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80038e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	fab3 f383 	clz	r3, r3
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	095b      	lsrs	r3, r3, #5
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d102      	bne.n	80038fc <HAL_RCC_ClockConfig+0x128>
 80038f6:	4b4f      	ldr	r3, [pc, #316]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	e00f      	b.n	800391c <HAL_RCC_ClockConfig+0x148>
 80038fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003900:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003904:	fa93 f3a3 	rbit	r3, r3
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
 800390a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390e:	643b      	str	r3, [r7, #64]	; 0x40
 8003910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003912:	fa93 f3a3 	rbit	r3, r3
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003918:	4b46      	ldr	r3, [pc, #280]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003920:	63ba      	str	r2, [r7, #56]	; 0x38
 8003922:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003924:	fa92 f2a2 	rbit	r2, r2
 8003928:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800392a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800392c:	fab2 f282 	clz	r2, r2
 8003930:	b2d2      	uxtb	r2, r2
 8003932:	f042 0220 	orr.w	r2, r2, #32
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	f002 021f 	and.w	r2, r2, #31
 800393c:	2101      	movs	r1, #1
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d13a      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b2      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
 800394c:	2302      	movs	r3, #2
 800394e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003952:	fa93 f3a3 	rbit	r3, r3
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	fab3 f383 	clz	r3, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	d102      	bne.n	8003974 <HAL_RCC_ClockConfig+0x1a0>
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	e00d      	b.n	8003990 <HAL_RCC_ClockConfig+0x1bc>
 8003974:	2302      	movs	r3, #2
 8003976:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
 8003980:	2302      	movs	r3, #2
 8003982:	623b      	str	r3, [r7, #32]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2202      	movs	r2, #2
 8003992:	61ba      	str	r2, [r7, #24]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	fa92 f2a2 	rbit	r2, r2
 800399a:	617a      	str	r2, [r7, #20]
  return result;
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	fab2 f282 	clz	r2, r2
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	f042 0220 	orr.w	r2, r2, #32
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	f002 021f 	and.w	r2, r2, #31
 80039ae:	2101      	movs	r1, #1
 80039b0:	fa01 f202 	lsl.w	r2, r1, r2
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e079      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039be:	4b1d      	ldr	r3, [pc, #116]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f023 0203 	bic.w	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	491a      	ldr	r1, [pc, #104]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039d0:	f7fd fba4 	bl	800111c <HAL_GetTick>
 80039d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d6:	e00a      	b.n	80039ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d8:	f7fd fba0 	bl	800111c <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e061      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f003 020c 	and.w	r2, r3, #12
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d1eb      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d214      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 0207 	bic.w	r2, r3, #7
 8003a16:	4906      	ldr	r1, [pc, #24]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1e:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_RCC_ClockConfig+0x25c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e040      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x2de>
 8003a30:	40022000 	.word	0x40022000
 8003a34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	491a      	ldr	r1, [pc, #104]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4912      	ldr	r1, [pc, #72]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003a76:	f000 f829 	bl	8003acc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_RCC_ClockConfig+0x2e8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a84:	22f0      	movs	r2, #240	; 0xf0
 8003a86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	fa92 f2a2 	rbit	r2, r2
 8003a8e:	60fa      	str	r2, [r7, #12]
  return result;
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	fab2 f282 	clz	r2, r2
 8003a96:	b2d2      	uxtb	r2, r2
 8003a98:	40d3      	lsrs	r3, r2
 8003a9a:	4a09      	ldr	r2, [pc, #36]	; (8003ac0 <HAL_RCC_ClockConfig+0x2ec>)
 8003a9c:	5cd3      	ldrb	r3, [r2, r3]
 8003a9e:	fa21 f303 	lsr.w	r3, r1, r3
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <HAL_RCC_ClockConfig+0x2f0>)
 8003aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_RCC_ClockConfig+0x2f4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fd faf2 	bl	8001094 <HAL_InitTick>
  
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3778      	adds	r7, #120	; 0x78
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	08003e60 	.word	0x08003e60
 8003ac4:	20000000 	.word	0x20000000
 8003ac8:	20000004 	.word	0x20000004

08003acc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b08b      	sub	sp, #44	; 0x2c
 8003ad0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
 8003ada:	2300      	movs	r3, #0
 8003adc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b04      	cmp	r3, #4
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x30>
 8003af6:	2b08      	cmp	r3, #8
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0x36>
 8003afa:	e03c      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003afc:	4b24      	ldr	r3, [pc, #144]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003afe:	623b      	str	r3, [r7, #32]
      break;
 8003b00:	e03c      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003b08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003b0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	fa92 f2a2 	rbit	r2, r2
 8003b14:	607a      	str	r2, [r7, #4]
  return result;
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	fab2 f282 	clz	r2, r2
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	40d3      	lsrs	r3, r2
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003b22:	5cd3      	ldrb	r3, [r2, r3]
 8003b24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003b26:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	f003 030f 	and.w	r3, r3, #15
 8003b2e:	220f      	movs	r2, #15
 8003b30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	fa92 f2a2 	rbit	r2, r2
 8003b38:	60fa      	str	r2, [r7, #12]
  return result;
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	fab2 f282 	clz	r2, r2
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	40d3      	lsrs	r3, r2
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b54:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
 8003b64:	e004      	b.n	8003b70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	4a0c      	ldr	r2, [pc, #48]	; (8003b9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	623b      	str	r3, [r7, #32]
      break;
 8003b74:	e002      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b76:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003b78:	623b      	str	r3, [r7, #32]
      break;
 8003b7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	372c      	adds	r7, #44	; 0x2c
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	00f42400 	.word	0x00f42400
 8003b94:	08003e70 	.word	0x08003e70
 8003b98:	08003e80 	.word	0x08003e80
 8003b9c:	003d0900 	.word	0x003d0900
 8003ba0:	007a1200 	.word	0x007a1200

08003ba4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b092      	sub	sp, #72	; 0x48
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 80cd 	beq.w	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc8:	4b86      	ldr	r3, [pc, #536]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b83      	ldr	r3, [pc, #524]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a82      	ldr	r2, [pc, #520]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bde:	61d3      	str	r3, [r2, #28]
 8003be0:	4b80      	ldr	r3, [pc, #512]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf2:	4b7d      	ldr	r3, [pc, #500]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d118      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfe:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a79      	ldr	r2, [pc, #484]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c08:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fa87 	bl	800111c <HAL_GetTick>
 8003c0e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c12:	f7fd fa83 	bl	800111c <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0db      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c24:	4b70      	ldr	r3, [pc, #448]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0f0      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c30:	4b6c      	ldr	r3, [pc, #432]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d07d      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d076      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c5c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c68:	fab3 f383 	clz	r3, r3
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	4b5e      	ldr	r3, [pc, #376]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c80:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	fa93 f3a3 	rbit	r3, r3
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c8c:	fab3 f383 	clz	r3, r3
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	461a      	mov	r2, r3
 8003c94:	4b55      	ldr	r3, [pc, #340]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003c96:	4413      	add	r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d045      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7fd fa34 	bl	800111c <HAL_GetTick>
 8003cb4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb6:	e00a      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cb8:	f7fd fa30 	bl	800111c <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e086      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	fa93 f3a3 	rbit	r3, r3
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003cda:	2302      	movs	r3, #2
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	fa93 f3a3 	rbit	r3, r3
 8003ce4:	61fb      	str	r3, [r7, #28]
  return result;
 8003ce6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce8:	fab3 f383 	clz	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003cfc:	4b39      	ldr	r3, [pc, #228]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	e007      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	4b35      	ldr	r3, [pc, #212]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2202      	movs	r2, #2
 8003d14:	613a      	str	r2, [r7, #16]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	fa92 f2a2 	rbit	r2, r2
 8003d1c:	60fa      	str	r2, [r7, #12]
  return result;
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	fab2 f282 	clz	r2, r2
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	f002 021f 	and.w	r2, r2, #31
 8003d30:	2101      	movs	r1, #1
 8003d32:	fa01 f202 	lsl.w	r2, r1, r2
 8003d36:	4013      	ands	r3, r2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0bd      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d3e:	6a1b      	ldr	r3, [r3, #32]
 8003d40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	4926      	ldr	r1, [pc, #152]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d105      	bne.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d60:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d008      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	f023 0203 	bic.w	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	491a      	ldr	r1, [pc, #104]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d8c:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f023 0210 	bic.w	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	4912      	ldr	r1, [pc, #72]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003daa:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	490b      	ldr	r1, [pc, #44]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	4903      	ldr	r1, [pc, #12]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003dda:	2300      	movs	r3, #0
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3748      	adds	r7, #72	; 0x48
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40007000 	.word	0x40007000
 8003dec:	10908100 	.word	0x10908100

08003df0 <__libc_init_array>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4d0d      	ldr	r5, [pc, #52]	; (8003e28 <__libc_init_array+0x38>)
 8003df4:	4c0d      	ldr	r4, [pc, #52]	; (8003e2c <__libc_init_array+0x3c>)
 8003df6:	1b64      	subs	r4, r4, r5
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	2600      	movs	r6, #0
 8003dfc:	42a6      	cmp	r6, r4
 8003dfe:	d109      	bne.n	8003e14 <__libc_init_array+0x24>
 8003e00:	4d0b      	ldr	r5, [pc, #44]	; (8003e30 <__libc_init_array+0x40>)
 8003e02:	4c0c      	ldr	r4, [pc, #48]	; (8003e34 <__libc_init_array+0x44>)
 8003e04:	f000 f820 	bl	8003e48 <_init>
 8003e08:	1b64      	subs	r4, r4, r5
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	2600      	movs	r6, #0
 8003e0e:	42a6      	cmp	r6, r4
 8003e10:	d105      	bne.n	8003e1e <__libc_init_array+0x2e>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e18:	4798      	blx	r3
 8003e1a:	3601      	adds	r6, #1
 8003e1c:	e7ee      	b.n	8003dfc <__libc_init_array+0xc>
 8003e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e22:	4798      	blx	r3
 8003e24:	3601      	adds	r6, #1
 8003e26:	e7f2      	b.n	8003e0e <__libc_init_array+0x1e>
 8003e28:	08003e90 	.word	0x08003e90
 8003e2c:	08003e90 	.word	0x08003e90
 8003e30:	08003e90 	.word	0x08003e90
 8003e34:	08003e94 	.word	0x08003e94

08003e38 <memset>:
 8003e38:	4402      	add	r2, r0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <memset+0xa>
 8003e40:	4770      	bx	lr
 8003e42:	f803 1b01 	strb.w	r1, [r3], #1
 8003e46:	e7f9      	b.n	8003e3c <memset+0x4>

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
